1 - pagina cliente Angular -->> https://cli.angular.io/
2 - npm install -g @angular/cli@6.0.7
3 - Para conferir se instalou -->> ng -v
4 - Criar o projeto -->> abrir terminal na pasta aonde o projeto sera criado -->>  sudo ng new alurapic -->> vulnerabilidades sarao apontadas -->> ignorar, quem deve corrigir e a equipe que disponibiliza os modulos
5 - Subir o servidor DENTRO DA PASTA DO PROJETO "ALURAPIC" -->> ng serve --open
6 - Se der erro para subir o servidor:

npm install rxjs@6.0.0 --save e depois tentar subir novamente com: ng serve --open

7 - Se der erro para acesso a arquivo -->> sudo chmod 777 package.json
8 - binding -> binding -> dentro de app.component.html ->
        <h1>
   		 Welcome to {{ title }}!
 	 </h1>
	dentro de app.component.ts -> 
		export class AppComponent {
		  title = 'app';
9 - Data binding com a imagem da tela inicial -> no arquivo app.component.html -> <img [src]="url" [alt]="title">

No arquivo que vai referenciar, app.component.ts, digitar:  export class AppComponent {
  title = 'app';
  description = "Leao";
  url= "https://upload.wikimedia.org/wikipedia/commons/thumb/5/5a/Sultan_the_Barbary_Lion.jpg/440px-Sultan_the_Barbary_Lion.jpg";
}

Data binding Utilizamos {{ }} dentro de tags e [ ] para atributos

Adicionar bootstrap ao projeto para criar um componente -> npm install bootstrap@4.1.1 -> verificar se a instalação apareceu no package.json, senão, digitar sudo npm install bootstrap@4.1.1 --save -> isto pode ocorrer por causa da versão do node

no pacote angular.json modificar para conter o conteudo e reiniciar o servidor:

		"styles": [
              "./node_modules/bootstrap/dist/css/bootstrap.min.css",
            ],
            "scripts": [] 



10 - Conveção de nomes -> arquivos criados pelo Angular CLI, focando em app.component.ts , Se quiséssemos criar um menubar.component.ts e, no nome do menu utilizarmos Pascal Case, ficaria MenubarComponent -> Para arquivos usamos menubar.component.ts, no nome usamos MenubarComponent
11 - 

####################################################
Titulo da Pagina
<h1>{{ title }}</h1>h1>
<img [src]="url" [alt]="title">
****************************************************
export class AppComponent {
  title = 'AluraPic';
  description = "Leao";
  url= "https://upload.wikimedia.org/wikipedia/commons/thumb/5/5a/Sultan_the_Barbary_Lion.jpg/440px-Sultan_the_Barbary_Lion.jpg";
}
####################################################
12 - para redimensionar a imagem -> class ims-thumbnail -> 
<img class="img-thumbnail" [src]="url" [alt]="title">
13 - Primeiro componente -> componentizar imagem ->  criar dentro de app a pasta foto e dentro o arquivo foto.componente.ts
14 - sudo chmod -R 777 alurapic -> para corrigir o problema de acesso as pastas do curso
15 - Auto import para criar componente -> @Component
16 - Boa pratica, pre-fixar os nomes do componentes -> selecor: 'ap-photo' -> ap significa alurapic
17 - Código original do app.component.html:
<h1>{{ title }}</h1>h1>
<img class="img-thumbnail" [src]="url" [alt]="title">
18 - Sequencia de criação do componente:
app.module.ts
************************
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppComponent } from './app.component';

import { PhotoComponent } from './photo/photo.component';

@NgModule({
  declarations: [
    AppComponent,
    PhotoComponent
  ],
  imports: [
    BrowserModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
*****************************
app.component.html
*****************************
<ap-photo></ap-photo>
*****************************
photo.component.ts
*****************************
import { Component } from "@angular/core";

@Component({
    selector: 'ap-photo',
    templateUrl: 'photo.component.html'
})
export class PhotoComponent{
  description = "Leao";
  url= "https://upload.wikimedia.org/wikipedia/commons/thumb/5/5a/Sultan_the_Barbary_Lion.jpg/440px-Sultan_the_Barbary_Lion.jpg";
}
******************************
photo.component.html
******************************
<img class="img-thumbnail" [src]="url" [alt]="description">

###########################################################

19 - Passando imagens por parâmetros para o componente:

***************************************************
// photo.component.ts #########################################################

import { Component, Input } from "@angular/core";

@Component({
    selector: 'ap-photo',
    templateUrl: 'photo.component.html'
})
export class PhotoComponent{
  @Input() description = '';
  @Input() url= '';
}
***************************************************
<!-- app.component.html ################################################### -->

<ap-photo url="https://upload.wikimedia.org/wikipedia/commons/thumb/5/5a/Sultan_the_Barbary_Lion.jpg/440px-Sultan_the_Barbary_Lion.jpg" description="Leão"> </ap-photo>
<ap-photo url="https://upload.wikimedia.org/wikipedia/commons/thumb/5/5a/Sultan_the_Barbary_Lion.jpg/440px-Sultan_the_Barbary_Lion.jpg" description="Foto Paisegem 001"></ap-photo>

***************************************************

20 - Organizando componentes em modulos

Criar a pasta photos e mover a pasta photo para o seu interior
*************************************************
// photos.module.ts ###########################################################

import { NgModule } from "@angular/core";
import { PhotoComponent } from "./photo/photo.component";

@NgModule({
//    ATENÇÃO - Precisa declarar e exportar para que o modulo possa ser utilizado ################# 
   declarations: [PhotoComponent], 
   exports: [ PhotoComponent ] 
})

export class PhotosModule{

}
*************************************************
// app.module.ts ##############################################################

import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppComponent } from './app.component';
import { PhotosModule } from './photos/photos.module';

@NgModule({
  declarations: [
    AppComponent,
  ],
  imports: [
    BrowserModule,
    PhotosModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
*************************************************
21 - Adicionando varios componentes com diretivas:
*************************************************
<!-- app.component.html ################################################### -->

<ap-photo
    *ngFor="let photo of photos"
    [url]="photo.url"
    [description]="photo.description">
</ap-photo>
*************************************************
// app.component.ts ###########################################################

import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {

  photos = [
    {
      url: 'https://upload.wikimedia.org/wikipedia/commons/thumb/5/5a/Sultan_the_Barbary_Lion.jpg/440px-Sultan_the_Barbary_Lion.jpg',
      description: 'Leão'
    },
    {
      url: 'https://upload.wikimedia.org/wikipedia/commons/thumb/2/2d/Lioness_Etosha_NP.jpg/500px-Lioness_Etosha_NP.jpg',
      description: 'Leoa'
    }
  ];

  }
*************************************************
22 - Integração com backend

Cuidado: caso apareça uma pasta "api" dentro de outra com mesmo nome, a que deverá ser recortada é a que contém arquivos como data.db, package, package-lock, data e server.

1 - Baixar arquivo API.zip, descompactar e colocar na mesma pasta em que a pasta alurapic esta
2 - Abrir um segundo terminal na mesma pasta aonde o arquivo api.zip foi descompactado
3 - Digitar, só precisa fazer na primeira vez -> cd api -> npm install -> npm start -> no browser digitar -> localhost:3000/flavio/photos
4 - Agora precisa abrir 2 terminais para subir cada servidor
5 - single Page Application, este servidor normalmente é chamado de Web API
6 - 
*************************************************
http://localhost:3000/flavio/photos
// app.component.ts ###########################################################

import { Component } from '@angular/core';
import { HttpClient, HttpHandler } from '@angular/common/http';


@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {

  photos: object[] = [];
  
  constructor(http: HttpClient) {
    console.log(http);
    const observable = http.
      get<Object[]>('http://localhost:3000/flavio/photos')
      // Executa a operação a traz os dados #####################################################
      .subscribe(photos =>{
         console.log(photos); 
         this.photos = photos,
         err => console.log(err.message) 
        });
  }
}
*************************************************
// app.module.ts ##############################################################

import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppComponent } from './app.component';
import { PhotosModule } from './photos/photos.module';
import { HttpClientModule } from '@angular/common/http';

@NgModule({
  declarations: [
    AppComponent,
  ],
  imports: [
    BrowserModule,
    PhotosModule,
    HttpClientModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
*************************************************
09/10/2019 ####################################################################

Subir servidores:

Abrir terminal na pasta alurapic -> ng serve --open
Abrir terminal na pasta api -> npm start
*************************************************
Criando serviços:

criar arquivo photo.service.ts

********************************************************************************
// photo.service.ts ##############################################################
// Isolando a acesso em serviços #################################################

// Import do httpclient para poder usar a constante API ##########################
import { HttpClient } from "@angular/common/http";
import { Injectable } from "@angular/core";

const API = 'http://localhost:3000';

// Injectable -> com 'root' garante acesso para todas as instâncias do codigo ####
// providedIn -> para informar que sempre vai usar o mesmo objeto ################
@Injectable({providedIn: 'root'})
export class PhotoService{

    // private para http no cliente para poder ser usado em listFromUser abaixo ##
    constructor(private http: HttpClient){
    }
    // A criação do serviço visa impedir a repetição de código, como no caso de ser necessário 
    // chamar  "/flavio/photos" várias vezes ao longo do código ou no caso de mudança do 
    // código que é chamado várias vezes em locais diferentes

    // string, com letra minúscula, para setar o tipo de userName ################
        listFromUser(userName: string){
            return this.http.
            get<Object[]>(API + '/flavio/photos');
    }
    // subscribe -> quem tem que fazer é o método que for usar o listFromUser
}
********************************************************************************
// app.component.ts ###########################################################

import { Component } from '@angular/core';
import { PhotoService } from './photos/photo/photo.service';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {

  photos: object[] = [];
  
  constructor(photoService: PhotoService) {

    photoService
    .listFromUser('flavio')
    .subscribe(photos => this.photos = photos);
    }
}
********************************************************************************
09/10/2019
Tipando nossa API
interface + refactor 
criar dentro da pasta photo o arquivo photo.ts para criar uma interface
// photo.service.ts ##############################################################
// Isolando a acesso em serviços #################################################

// Import do httpclient para poder usar a constante API ##########################
import { HttpClient } from "@angular/common/http";
import { Injectable } from "@angular/core";
import { Photo } from "./photo";

const API = 'http://localhost:3000';

// Injectable -> com 'root' garante acesso para todas as instâncias do codigo ####
// providedIn -> para informar que sempre vai usar o mesmo objeto ################
@Injectable({providedIn: 'root'})
export class PhotoService{

    // private para http no cliente para poder ser usado em listFromUser abaixo ##
    constructor(private http: HttpClient){
    }
    // A criação do serviço visa impedir a repetição de código, como no caso de ser necessário 
    // chamar  "/flavio/photos" várias vezes ao longo do código ou no caso de mudança do 
    // código que é chamado várias vezes em locais diferentes

    // string, com letra minúscula, para setar o tipo de userName ################
        listFromUser(userName: string){
            return this.http.
            // get<Photo - faz o get dos elementos a partir da interface com 
            // acesso aos seus parâmetros
            get<Photo[]>(API + '/flavio/photos');
    }
    // subscribe -> quem tem que fazer é o método que for usar o listFromUser
}
********************************************************************************

12/10/2019 #####################################################################

Ciclo de vida de um componente - ngoninit
*******************************************************************************
// app.component.ts ###########################################################

import { Component, OnInit } from '@angular/core';
import { PhotoService } from './photos/photo/photo.service';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})

// implements OnInit para chamar a implementação do método #######################
// com implements o compilador acusa erro se digitar OnInit errado ###############
export class AppComponent implements OnInit{

  photos: object[] = [];
  
  // dixando construtor somente para injeção de dependências #####################
  // private para permitir que photoservice seja visto pelo metodo ngOnInit ######
  constructor(private photoService: PhotoService) {
  }

  // Fase do ciclo de vida de um componente ###################################### 
  // Todas as inicializações passam a ser feitas através do OnInit ############### 
  ngOnInit(): void{
    // this. para acessar a propriedade de photoservice ##########################
    this.photoService
    .listFromUser('flavio')
    .subscribe(photos => {
      // acessa a partir da interface o parametro descricao da foto [0] no array #
      console.log(photos[0].description)
      console.log(photos[0].id)
      console.log(photos[0].userId)
      console.log(photos[0].comments)
      this.photos = photos
    });
  }

}
*******************************************************************************
// photos.module.ts ###########################################################

import { NgModule } from "@angular/core";
import { PhotoComponent } from "./photo/photo.component";
// Importa HttpClientModule para atender á dependência ########################
// pois HttpClientModule nãp possui todas as dependências #####################
// que precisa para funcionar #################################################
import { HttpClientModule } from "@angular/common/http";

@NgModule({
//  ATENÇÃO - Precisa declarar e exportar para que ############################
//  o modulo possa ser utilizado ############################################## 
   declarations: [PhotoComponent], 
   exports: [ PhotoComponent ],
   imports: [ HttpClientModule ] 
})

export class PhotosModule{

}
*******************************************************************************
// app.module.ts ##############################################################

import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppComponent } from './app.component';
import { PhotosModule } from './photos/photos.module';
// import { HttpClientModule } from '@angular/common/http';

@NgModule({
  declarations: [
    AppComponent,
  ],
  imports: [
    BrowserModule,
    PhotosModule,
    // Remove HttpClientModule para importar em photos.module.ts #################
    // HttpClientModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
*******************************************************************************
Componente responsável pela exibição de fotos atualmente -> app.component.ts -> primeiro componente carregado pela aplicação
Módulo que guarda todas as informações sobre fotos -> photos.module.ts
Criar componente dentro de photos.module que terá a responsabilidade de exibir as fotos -> 
assim app.component.ts deixará de ter a responsabilidade de carregar as fotos e poderá se transformar um agregador de componentes no futuro

Criar pasta photo-list e seus componentes via console:

Acessar o terminal do Angular CLI -> crtl + c
Dentro da pasta alurapic -> ng generate component photos/photo-list

ATENÇÃO - Pode dar erro ao executar o comando acima -> Unexpected token ] in JSON at position 819

Utilizar página para validação de json para ajudar a localizar o erro, exemplo: https://jsonformatter.curiousconcept.com/

No caso havia um erro com o "]" em -> 

            "styles": [
              "./node_modules/bootstrap/dist/css/bootstrap.min.css",
            ],

Apagando os colchetes que encapsulavam o código resolveu -> 

"styles": 
              "./node_modules/bootstrap/dist/css/bootstrap.min.css",

A saída do console foi:
*******************************************************************************
ng generate component photos/photo-list
CREATE src/app/photos/photo-list/photo-list.component.css (0 bytes)
CREATE src/app/photos/photo-list/photo-list.component.html (29 bytes)
CREATE src/app/photos/photo-list/photo-list.component.spec.ts (650 bytes)
CREATE src/app/photos/photo-list/photo-list.component.ts (284 bytes)
UPDATE src/app/photos/photos.module.ts (885 bytes)
haguenmcleod@haguenmcleod-Inspiron-5557:~/Backup20190927001/CursosInformati
*******************************************************************************
-> verificar se foi criada a pasta photo-list dentro de photo
*******************************************************************************
// photo-list.component.ts #######################################################

import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-photo-list',
  templateUrl: './photo-list.component.html',
  styleUrls: ['./photo-list.component.css']
})
export class PhotoListComponent implements OnInit {

  constructor() { }

  ngOnInit() {
  }

}
*******************************************************************************
// photos.module.ts ###########################################################

import { NgModule } from "@angular/core";
import { PhotoComponent } from "./photo/photo.component";
// Importa HttpClientModule para atender á dependência ########################
// pois HttpClientModule nãp possui todas as dependências #####################
// que precisa para funcionar #################################################
import { HttpClientModule } from "@angular/common/http";
import { PhotoListComponent } from './photo-list/photo-list.component';

@NgModule({
//  ATENÇÃO - Precisa declarar e exportar para que ############################
//  o modulo possa ser utilizado ############################################## 
   declarations: [PhotoComponent, PhotoListComponent], 
   exports: [ PhotoComponent ],
   imports: [ HttpClientModule ] 
})

export class PhotosModule{

}
*******************************************************************************
// app.component.ts ###########################################################

import { Component, OnInit } from '@angular/core';
import { PhotoService } from './photos/photo/photo.service';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})

// implements OnInit para chamar a implementação do método #######################
// com implements o compilador acusa erro se digitar OnInit errado ###############
export class AppComponent implements OnInit{

  photos: object[] = [];
  
  // dixando construtor somente para injeção de dependências #####################
  // private para permitir que photoservice seja visto pelo metodo ngOnInit ######
  constructor(private photoService: PhotoService) {
  }

  // Fase do ciclo de vida de um componente ###################################### 
  // Todas as inicializações passam a ser feitas através do OnInit ############### 
  ngOnInit(): void{
    // this. para acessar a propriedade de photoservice ##########################
    this.photoService
    .listFromUser('flavio')
    .subscribe(photos => {
      // acessa a partir da interface o parametro descricao da foto [0] no array #
      console.log(photos[0].description)
      console.log(photos[0].id)
      console.log(photos[0].userId)
      console.log(photos[0].comments)
      this.photos = photos
    });
  }

}
*******************************************************************************
<!-- app.component.html ################################################### -->

<!-- Remove o conteúdo INTEIRO de app.component.html e move para ############## 
photo-listcomponent ####################################################### -->

<!-- <ap-photo
    *ngFor="let photo of photos"
    [url]="photo.url"
    [description]="photo.description">
</ap-photo> -->
<!-- <ap-photo url="https://upload.wikimedia.org/wikipedia/commons/thumb/5/5a/Sultan_the_Barbary_Lion.jpg/440px-Sultan_the_Barbary_Lion.jpg" description="Leão"> </ap-photo> -->
<!-- <ap-photo url="https://upload.wikimedia.org/wikipedia/commons/thumb/5/5a/Sultan_the_Barbary_Lion.jpg/440px-Sultan_the_Barbary_Lion.jpg" description="Foto Paisegem 001"></ap-photo> -->

*******************************************************************************
<!-- photo-list.component.html ########################################### -->

<!-- Recebe o conteúdo que veio de  app.component.html ################### -->

<ap-photo
    *ngFor="let photo of photos"
    [url]="photo.url"
    [description]="photo.description">
</ap-photo>
*******************************************************************************
// photos.module.ts ###########################################################

// Por convenção, agrupar imports do Angular antes das ########################
// importações do componentes #################################################

import { NgModule } from "@angular/core";
import { HttpClientModule } from "@angular/common/http";

import { PhotoComponent } from "./photo/photo.component";
import { PhotoListComponent } from './photo-list/photo-list.component';

@NgModule({
   declarations: [PhotoComponent, PhotoListComponent], 
   imports: [ HttpClientModule ] 
})

export class PhotosModule{

}
*******************************************************************************

Corrigir auto import do Visual Studio para considerar aspas simples e duplas:

No menu -> File/Preferences/Settings/

do lado esquerdo serão exibidas as configurações padrão do Visual Studio, enquanto que do lado direito estarão as configurações do usuário, em que incluiremos as seguintes linhas entre chaves:

"javascript.preferences.quoteStyle":"single",
"typescript.preferences.quoteStyle": "single"

*******************************************************************************
Boa prática, sempre que criar um módulo novo importar o módulo CommonModules, que contpem as diretivas mais comuns para uso, exemplo:

import { NgModule } from "@angular/core";
import { HttpClientModule } from "@angular/common/http";
import { CommonModule } from '@angular/common';

import { PhotoComponent } from "./photo/photo.component";
import { PhotoListComponent } from './photo-list/photo-list.component';


@NgModule({
   declarations: [PhotoComponent, PhotoListComponent], 
   imports: [ HttpClientModule,
	CommonModule importado aqui ###########################################
               CommonModule         
   ] 
})

export class PhotosModule{

}
*******************************************************************************
Criando segundo componente e rotas:

No console -> ng generate component photos/photo-form

Roteamento de Single Page Apllication

Primeiro componente sendo carregado -> <app-root></app-root> em index.html -> de acordo com o que o usuário digitar a rota deve indeicar o caminho -> index.html vai fazer um de/para -> o Angular vai interceptar o endereço inserido e carregar o compoente específico -> dentro de app criar o arquivo app.routing.module.ts -> 
*******************************************************************************
<!-- index.html ########################################################### -->
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Alurapic</title>
  <base href="/">

  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
</head>
<body>
  <!-- As rotas passam por app-root ####################################### -->
  <app-root></app-root>
</body>
</html>
*******************************************************************************
// app.routing.module.ts ######################################################

import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';

import { PhotoListComponent } from './photos/photo-list/photo-list.component';

const routes: Routes = [
    
        // Rotas listadas abaixo ##############################################
        // Para que o compilador avise sobre eventuais  #######################
        // erros de digitação em "path" efetuar o import ######################
        //  import { Routes } from '@angular/router'; #########################
        // e definir a constante acima como : Routes ##########################
        {path: 'user/flavio', component: PhotoListComponent},
        {path: 'p/add', component: PhotoListComponent}
];


@NgModule({
    // Conecta com a contante routes criada acima #############################
    imports: [RouterModule.forRoot(routes)],
    // Exporta RouterModule para uso em app.component.html ####################    
    exports: [RouterModule]
})

export class AppRoutingModule{

}
*******************************************************************************
// app.module.ts ##############################################################

import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppComponent } from './app.component';
import { PhotosModule } from './photos/photos.module';
import { AppRoutingModule } from './app.routing.module';

@NgModule({
  declarations: [
    AppComponent,
  ],
  imports: [
    BrowserModule,
    PhotosModule,
    // Importa o AppRoutingModule #############################################
    // IMPORTANTE o Angular pode ser perder ao importar um modulo ############# 
    // de rotas , para prevenir , após importar , #############################
    // reiniciar o servidor -> ng serve --open ################################
    AppRoutingModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }

*******************************************************************************
<!-- app.component.html ################################################### -->
<!-- Criar a diretiva abaixo para trabalhar com as rotas ################## -->

<router-outlet></router-outlet>

*******************************************************************************

Para testar, digitar no navegador -> http://localhost:4200/user/flavio ou 
http://localhost:4200/p/add

*******************************************************************************
BrowserModule e CommonModule - 13/10/2019

Exports all the basic Angular directives and pipes, such as NgIf, NgForOf, DecimalPipe, and so on. Re-exported by BrowserModule, which is included automatically in the root AppModule when you create a new app with the CLI new command.
*******************************************************************************
// photos.module.ts ###########################################################

// Por convenção, agrupar imports do Angular antes das ########################
// importações do componentes #################################################

import { NgModule } from "@angular/core";
import { HttpClientModule } from "@angular/common/http";
// Import de CommonModule #####################################################
import { CommonModule } from '@angular/common';

import { PhotoComponent } from "./photo/photo.component";
import { PhotoListComponent } from './photo-list/photo-list.component';
import { PhotoFormComponent } from './photo-form/photo-form.component';


@NgModule({
   declarations: [PhotoComponent, PhotoListComponent, PhotoFormComponent], 
   imports: [ 
      HttpClientModule,
      // CommonModule deve ser importado para que #############################
      // photo-list.component.html reconheça o comando ########################
      // *ngFor="let photo of photos" #########################################
      CommonModule         
            ] 
})

export class PhotosModule{

}
****************************************
<!-- photo-list.component.html ########################################### -->
<!-- Recebe o conteúdo que veio de  app.component.html ################### -->

<ap-photo
    *ngFor="let photo of photos"
    [url]="photo.url"
    [description]="photo.description">
</ap-photo>

*******************************************************************************
15/10/2019 ####################################################################
08 Lidando com rotas inexistentes
*******************************************************************************
O Angular sim interpreta a URL e verifica se há um roteamento associado. Se não
 tiver nenhum roteamento que serve, é mostrado um erro no console.
*******************************************************************************
Tratar erro quando uma rota não cadastrada é inserida na barra ################
de endereço do browser, no console, pausar o ##################################
servidor e digitar -> ng generate module errors ###############################
ai criar o modulo para tratamento de erros ####################################
*******************************************************************************
// app.routing.module.ts ######################################################

import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';

import { PhotoListComponent } from './photos/photo-list/photo-list.component';
import { NotFoundComponent } from './errors/not-found/not-found.component';

const routes: Routes = [
    
        // Rotas listadas abaixo ##############################################
        // Para que o compilador avise sobre eventuais  #######################
        // erros de digitação em "path" efetuar o import ######################
        //  import { Routes } from '@angular/router'; #########################
        // e definir a constante acima como : Routes ##########################
        {path: 'user/flavio', component: PhotoListComponent},
        {path: 'p/add', component: PhotoListComponent},
        // Rota para o caso de uma rota não cadastrada ser inserida ###########
        // na barra de endereços do browser ###################################
        // {path: '**', component: PhotoListComponent}
        // OUTRA SOLUÇÃO - Criação de Componente NotFound para ################
        // tratamento de rota inválida ########################################
        {path: '**', component: NotFoundComponent}

];


@NgModule({
    // Conecta com a contante routes criada acima #############################
    imports: [RouterModule.forRoot(routes)],
    // Exporta RouterModule para uso em app.component.html ####################    
    exports: [RouterModule]
})

export class AppRoutingModule{

}
*******************************************************************************
Criação do componente not found dentro da pasta errors criada #################
anteriormente -> ng generate component errors/not-found #######################
*******************************************************************************
// errors/not-found/not-found.component.ts ####################################

import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-not-found',
  templateUrl: './not-found.component.html',
  styleUrls: ['./not-found.component.css']
})
export class NotFoundComponent implements OnInit {

  constructor() { }

  ngOnInit() {
  }

}
*******************************************************************************
<!-- errors/not/found/not-found.component.html ############################ -->

<div class="text-center">
  <h2>This page is not avaliable</h2>
  <p>
      The link you have acccessed may be broken or
      the page may have ben removed.
  </p>
</div>
*******************************************************************************
// app.module.ts ##############################################################

import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppComponent } from './app.component';
import { PhotosModule } from './photos/photos.module';
import { AppRoutingModule } from './app.routing.module';
import { ErrorsModule } from './errors/errors.module';

@NgModule({
  declarations: [
    AppComponent,
  ],
  imports: [
    BrowserModule,
    PhotosModule,
    // Importa o AppRoutingModule #############################################
    // IMPORTANTE o Angular pode se perder ao importar um modulo ##############
    // de rotas , para prevenir , após importar , #############################
    // reiniciar o servidor -> ng serve --open ################################
    AppRoutingModule,
    // Importar o módulo correspondente ao compoente criado ###################
    ErrorsModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }

*******************************************************************************
10 Segmentos de rotas - 16/05/2019

*******************************************************************************
// app.routing.module.ts ######################################################

import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';

import { PhotoListComponent } from './photos/photo-list/photo-list.component';
import { NotFoundComponent } from './errors/not-found/not-found.component';

const routes: Routes = [
    
        // Segmentação de rotas -> user/flavio -> user/:userName ##############
        {path: 'user/:userName', component: PhotoListComponent},

        {path: 'p/add', component: PhotoListComponent},
        {path: '**', component: NotFoundComponent}

];

@NgModule({
    imports: [RouterModule.forRoot(routes)],
    exports: [RouterModule]
})

export class AppRoutingModule{ }
*******************************************************************************
// photo-list.component.ts #######################################################

import { Component, OnInit } from '@angular/core';
import { PhotoService } from '../photo/photo.service';
import { ActivatedRoute } from '@angular/router';

@Component({
  selector: 'app-photo-list',
  templateUrl: './photo-list.component.html',
  styleUrls: ['./photo-list.component.css']
})
export class PhotoListComponent implements OnInit {

  photos: any[] = [];

  constructor(
    private photoService: PhotoService,
    // Segmentação de rotas 1/3 ############################################### 
    private activatedRoute: ActivatedRoute
    ) {  }

  ngOnInit(): void{
    // Segmentação de rotas 2/3 ############################################### 
    const userName = this.activatedRoute.snapshot.params.userName;
    this.photoService
    
    // Segmentação de rotas 3/3 ############################################### 
    // .listFromUser('flavio') ################################################
    .listFromUser(userName)
    .subscribe(photos => {
      console.log(photos[0].description)
      console.log(photos[0].id)
      console.log(photos[0].userId)
      console.log(photos[0].comments)
      this.photos = photos
    });
  }

}

*******************************************************************************
// photo.service.ts ###########################################################
import { HttpClient } from "@angular/common/http";
import { Injectable } from "@angular/core";
import { Photo } from "./photo";

const API = 'http://localhost:3000';

@Injectable({providedIn: 'root'})
export class PhotoService{

    constructor(private http: HttpClient){
    }
        listFromUser(userName: string){
            return this.http.
            // Segmentação de rotas ###########################################
            get<Photo[]>(API + '/' + userName + '/photos');
    }
}
*******************************************************************************
02 Melhorando a apresentação da lista - 16/10/2019 ############################
Grid do bootstrap #############################################################
*******************************************************************************
<!-- photo-list.component.html ########################################### -->
<!-- 02 Melhorando a apresentação da lista ############################### -->
<!-- Usando grid do booststrap ########################################### -->

<ol class="list-unstyled row">
    <li *ngFor="let photo of photos" class="col-4">
        <ap-photo
            [url]="photo.url"
            [description]="photo.description">
        </ap-photo>
    </li>
</ol>
*******************************************************************************
 03 Componente exclusivo para listar fotos
*******************************************************************************
Criar o componente photo-list -> ng generate component photos/photo-list/photos
*******************************************************************************
<!-- photo-list.component.html ########################################### -->
<!-- 02 Melhorando a apresentação da lista ############################### -->

<ap-photos [photos]="photos"></ap-photos>
*******************************************************************************
// photo-list.component.ts #######################################################

import { Component, OnInit } from '@angular/core';
import { PhotoService } from '../photo/photo.service';
import { ActivatedRoute } from '@angular/router';
import { Photo } from '../photo/photo';

@Component({
  selector: 'app-photo-list',
  templateUrl: './photo-list.component.html',
  styleUrls: ['./photo-list.component.css']
})
export class PhotoListComponent implements OnInit {
  // Mudar o array de photos: any[] para photos: Photo[] ######################
  // já que o componete correspondente foi criado #############################
  photos: Photo[] = [];

  constructor(
    private photoService: PhotoService,
    private activatedRoute: ActivatedRoute
    ) {  }

  ngOnInit(): void{
    const userName = this.activatedRoute.snapshot.params.userName;
    this.photoService
    
    .listFromUser(userName)
    .subscribe(photos => {
      console.log(photos[0].description)
      console.log(photos[0].id)
      console.log(photos[0].userId)
      console.log(photos[0].comments)
      this.photos = photos
    });
  }
}
*******************************************************************************
<!-- photos.component.html ############################################### -->
<!-- 02 Melhorando a apresentação da lista ############################### -->
<!-- Usando grid do booststrap ########################################### -->

<ol class="list-unstyled row">
  <li *ngFor="let photo of photos" class="col-4">
      <ap-photo
          [url]="photo.url"
          [description]="photo.description">
      </ap-photo>
  </li>
</ol>
*******************************************************************************
// photos.component.ts ########################################################

import { Component, OnInit, Input } from '@angular/core';
import { Photo } from '../../photo/photo';

@Component({
  // Atenção para mudar para ap-not-found abaixo após #########################
  // criar o componente #######################################################
  selector: 'ap-photos',
  templateUrl: './photos.component.html',
  styleUrls: ['./photos.component.css']
})
export class PhotosComponent implements OnInit {

  @Input() photos: Photo[] = [];

  constructor() { }

  ngOnInit() {
  }
}
*******************************************************************************
// photo-form.component.ts ####################################################

import { Component, OnInit } from '@angular/core';

@Component({
  // Atenção para mudar para ap-not-found abaixo após #########################
  // criar o componente #######################################################
  selector: 'ap-photo-form',
  templateUrl: './photo-form.component.html',
  styleUrls: ['./photo-form.component.css']
})
export class PhotoFormComponent implements OnInit {

  constructor() { }

  ngOnInit() {
  }
}
*******************************************************************************
// errors/not-found/not-found.component.ts ####################################

import { Component, OnInit } from '@angular/core';

@Component({
  // Atenção para mudar para ap-not-found abaixo após #########################
  // criar o componente #######################################################
  selector: 'ap-not-found',
  templateUrl: './not-found.component.html',
  styleUrls: ['./not-found.component.css']
})
export class NotFoundComponent implements OnInit {

  constructor() { }

  ngOnInit() {
  }
}
*******************************************************************************
// photos.module.ts ###########################################################

import { NgModule } from "@angular/core";
import { HttpClientModule } from "@angular/common/http";
import { CommonModule } from '@angular/common';

import { PhotoComponent } from "./photo/photo.component";
import { PhotoListComponent } from './photo-list/photo-list.component';
import { PhotoFormComponent } from './photo-form/photo-form.component';
import { PhotosComponent } from './photo-list/photos/photos.component';


@NgModule({
   declarations: [PhotoComponent, 
      PhotoListComponent, 
      PhotoFormComponent,
      // Criação de PhotosComponentnent após comando no console ############### 
      PhotosComponent], 
   imports: [ 
      HttpClientModule,
      CommonModule         
            ] 
})
export class PhotosModule{
}
*******************************************************************************
04 Implementando a lógica do Grid - 17/10/2019 ################################
*******************************************************************************
// photos.component.ts ########################################################

import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';
import { Photo } from '../../photo/photo';

@Component({
  selector: 'ap-photos',
  templateUrl: './photos.component.html',
  styleUrls: ['./photos.component.css']
})
export class PhotosComponent implements OnChanges {

  // lista de dados que conterá as fotos na tela ##############################
  // Serão 3 colunas por linha ################################################
  @Input() photos: Photo[] = [];
  rows: any[] = [];
 
  constructor() { }

  // ngOnInit() {
  //   this.rows = this.groupColumns(this.photos);
  // }
  // ngOnInit -> Deve ser trocado por ngOnChanges porque ngOnInit #############
  // alimenta o componente apenas na inicialização e o for alimenta ###########
  // o compomente em loop até preencher o grid com tantas fotos ###############
  // quantas o array tiver ####################################################
  ngOnChanges(changes: SimpleChanges){
    if(changes.photos)
    this.rows = this.groupColumns(this.photos);
  }

  // Itera fotos de 3 em 3 ####################################################
  groupColumns(photos: Photo[]){
    const newRows = [];
    
    for(let index = 0; index < photos.length; index+=3) {
      // Adiciona as fotos de 3 em 3 ##########################################
      // Slice = fatia de array de fotos, de 3 em 3 ###########################
      // O primeiro parâmetro de slice é a posição inclusive na ###############
      // qual os elementos serão considerados. O segundo é a posição ##########
      // final (não inclusiva). ###############################################
      newRows.push(photos.slice(index, index + 3));
    }
    return newRows;
  }
}

// Exercício(s) Slice #########################################################
// O primeiro parâmetro de slice é a posição inclusive na #####################
// qual os elementos serão considerados. O segundo é a posição ################
// final (não inclusiva). #####################################################
// 
// const idades = [22, 18, 17, 25, 38, 42];
// for(let i = 0; i < idades.length; i++) {
//   console.log(idades.slice(i, i + 2)); // qual a saída?
// }
// Saída do console:
// [22, 18]
// [18, 17]
// [17, 25]
// [25, 38]
// [38, 42]
// [42]
// ****************************************************************************
// const idades = [22, 15, 31, 10];
// console.log(idades.slice(1,3));
// Saída do console:
// [15, 31]
// ############################################################################
*******************************************************************************
<!-- photos.component.html ################################################ -->

<ol class="list-unstyled">
    <!-- cols = colunas ################################################### -->
    <!-- For para iterar o grid ########################################### -->
    <li *ngFor="let cols of rows" class="row">
        <!-- For para iterar as fotos por linha ########################### -->
        <!-- Define que serão linhas com 3 itens ########################## -->
        <div *ngFor="let photo of cols" class="col-4">
            <ap-photo
                [url]="photo.url"
                [description]="photo.description">
            </ap-photo>
        </div>
    </li>
</ol>
*******************************************************************************
02 Binding de eventos - 19/10/2019 ############################################
Inserção de campo filtro para exibição de fotos ###############################
*******************************************************************************
03 Pipe e implementação #######################################################
*******************************************************************************
<!-- photo-list.component.html ########################################### -->
<!-- Este é o componente que tras os dados e diponibiliza para 
    photos.component.html que faz a rederização ########################## -->

<!-- Insere um campo text para pesquisa centralizado no alto da tela ##### -->
<!-- mt-3 mb-3 -> margem top e e margem botom e ########################## -->
<!-- EVENT BIDING -> (keyup) entre () significa que para cada evento a
    expressão será avaliada -->
<div class="text-center mt-3 mb-3">
    <form>
        <input
            class="rounded"
            type="search"
            placeholder="search..."
            autofocus
            (keyup)="filter = $event.target.value"
            >
    </form>
</div>

<!-- Para testar se o event de digitação do teclado esta funcionando ##########
     descomentar o comando abaixo -->
<!-- {{ filter }} -->

<!-- Exemplo de uso de Pipe ############################################### -->
{{ nome | uppercase }}

<!-- Pipe sendo usado abaixo -->
<ap-photos [photos]="photos | filterByDescription: filter"></ap-photos>

<!-- Diferença Data Binding e Event Biding ################################ -->
<!-- São unidirecionais ################################################### -->
<!-- [] -> o dado vem do componente em direção ao template
     () -> o dado vai do template para o componente -->
*******************************************************************************
<!-- photos.component.html ################################################ -->

<!-- Tratamento para o caso de o usuário informar um valor ####################
inválido no campo de busca -->
<!-- text-muted -> Fonte do texto alterada  -->
<!-- *ngIf="!photos.length -> Diretiva para só exibir a msg de erro se
    não forem encontradas fotos para exibição -->
<p class="text-center text-muted" *ngIf="!photos.length">
    Sorry, no photos
</p>

<ol class="list-unstyled">
    <li *ngFor="let cols of rows" class="row">
        <div *ngFor="let photo of cols" class="col-4">
            <ap-photo
                [url]="photo.url"
                [description]="photo.description">
            </ap-photo>
        </div>
    </li>
</ol>
*******************************************************************************
// photos/filter-by-description.pipe.ts #######################################

import { Pipe, PipeTransform } from '@angular/core';
import { Photo } from '../../photo/photo';

// @Pipe({ name -> inica o nome do filtro #####################################
@Pipe({ name: 'filterByDescription'})
export class FilterByDescription implements PipeTransform {

    transform(photos: Photo[], descriptionQuery: string) {
        descriptionQuery = descriptionQuery
            .trim()
            .toLowerCase();

        // Se o campo filtro estive preeenchido executa o filtro ##############    
        if(descriptionQuery) {
            return photos.filter(photo =>
                photo.description.toLowerCase().includes(descriptionQuery)
            );
        // Se não for informado um valor no filtro retorna todas as fotos ##### 
        } else {
            return photos;
        }
    }
}
*******************************************************************************
// photos.module.ts ###########################################################

import { NgModule } from "@angular/core";
import { HttpClientModule } from "@angular/common/http";
import { CommonModule } from '@angular/common';

import { PhotoComponent } from "./photo/photo.component";
import { PhotoListComponent } from './photo-list/photo-list.component';
import { PhotoFormComponent } from './photo-form/photo-form.component';
import { PhotosComponent } from './photo-list/photos/photos.component';
import { FilterByDescription } from './photo-list/photos/filter-by-description.pipe';

@NgModule({
   declarations: [PhotoComponent, 
      PhotoListComponent, 
      PhotoFormComponent,
      PhotosComponent,
      // Declarar o modulo do filtro criado e importar ########################
      FilterByDescription
   ], 
   imports: [ 
      HttpClientModule,
      CommonModule         
            ] 
})
export class PhotosModule{
}
*******************************************************************************
// photo-list.component.ts #######################################################

import { Component, OnInit } from '@angular/core';
import { PhotoService } from '../photo/photo.service';
import { ActivatedRoute } from '@angular/router';
import { Photo } from '../photo/photo';

@Component({
  selector: 'app-photo-list',
  templateUrl: './photo-list.component.html',
  styleUrls: ['./photo-list.component.css']
})
export class PhotoListComponent implements OnInit {
  photos: Photo[] = [];
  
  // Variável para receber o texto digitado no campo de filtro ################ 
  filter: string = '';

  // Variável criada temporariamente para demonstrar o uso de Pipe ############
  // Na tela devará aparecer o texto com a tranformação 
  // indicada em photo-list.component.html
  nome = 'Haguen'

  constructor(
    private photoService: PhotoService,
    private activatedRoute: ActivatedRoute
    ) {  }

  ngOnInit(): void{
    const userName = this.activatedRoute.snapshot.params.userName;
    this.photoService
    
    .listFromUser(userName)
    .subscribe(photos => {
      console.log(photos[0].description)
      console.log(photos[0].id)
      console.log(photos[0].userId)
      console.log(photos[0].comments)
      this.photos = photos
    });
  }
}
*******************************************************************************
05 Resolvers ##################################################################
No momento, ao carregar a página e teclar f5, o sistema exibe por #############
alguns instantes a msg de sorry no photos
*******************************************************************************
// /photos/photo-listresolver.ts ##############################################

// Resolver, capaz de lidar com dados durante a ###############################
// navegação de uma rota para disponibilizá-los a um 
// componente antes deste ser carregado

import { Injectable } from '@angular/core';
import { Resolve, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';
import { Observable } from 'rxjs';

import { PhotoService } from '../../photo/photo.service';
import { Photo } from '../../photo/photo';

@Injectable({ providedIn: 'root'})
export class PhotoListResolver implements Resolve<Observable<Photo[]>>{

    constructor(private service: PhotoService) {}
    // ActivatedRouteSnapshot -> já traz informações do que ocorre na rota ####
    // em tempo de execução 
    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {
        const userName = route.params.userName;
        return this.service.listFromUser(userName);
    }
}
*******************************************************************************
// photo-list.component.ts #######################################################

import { Component, OnInit } from '@angular/core';
import { PhotoService } from '../photo/photo.service';
import { ActivatedRoute } from '@angular/router';
import { Photo } from '../photo/photo';

@Component({
  selector: 'app-photo-list',
  templateUrl: './photo-list.component.html',
  styleUrls: ['./photo-list.component.css']
})
export class PhotoListComponent implements OnInit {
  
  // photos é carregado com vazio quando o sistema sobe e só é ################
  // populado depois, isto causa a exibição por instantes da
  // mensagem sorry no photos" que é sobrescrita depois com
  // a listagem das fotos
  
  photos: Photo[] = [];
  
  filter: string = '';

  nome = 'Haguen'

  constructor(
    private photoService: PhotoService,
    private activatedRoute: ActivatedRoute
    ) {  }

  //  Altera o ngOnInit para trabalhar com o resolver #########################
  ngOnInit(): void{
    // data -> permite pegar o valor photos me app.routing.module.ts ##########
    this.photos = this.activatedRoute.snapshot.data['photos']
    }
}

*******************************************************************************
// app.routing.module.ts ######################################################

import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';

import { PhotoListComponent } from './photos/photo-list/photo-list.component';
import { NotFoundComponent } from './errors/not-found/not-found.component';
import { PhotoListResolver } from './photos/photo-list/photos/photo-listresolver';

const routes: Routes = [
    
        // Alteração de rota principal para trabalhar com o resolver ##########
        {path: 'user/:userName', 
            component: PhotoListComponent,
            resolve:{
                photos: PhotoListResolver
            }
        },

        {path: 'p/add', component: PhotoListComponent},
        {path: '**', component: NotFoundComponent}
];

@NgModule({
    imports: [RouterModule.forRoot(routes)],
    exports: [RouterModule]
})

export class AppRoutingModule{
}
*******************************************************************************
07 RxJS e seu Subject - 20/10/2019 ############################################
Melhoria de performance
Aplicar intervalo de tempo parametrizável após a digitação para só então
submeter a consulta, para não submeter uma consulta a cada
caractere digitado
*******************************************************************************
// photo/list/photo-list.component.ts #########################################

import { Component, OnInit, OnDestroy } from '@angular/core';
import { PhotoService } from '../photo/photo.service';
import { ActivatedRoute } from '@angular/router';
import { Subject } from 'rxjs';
import { debounceTime } from 'rxjs/operators';

import { Photo } from '../photo/photo';

@Component({
  selector: 'app-photo-list',
  templateUrl: './photo-list.component.html',
  styleUrls: ['./photo-list.component.css']
})
export class PhotoListComponent implements OnInit, OnDestroy {
  
  photos: Photo[] = [];
  filter: string = '';

  // debounce -> propriedade para aguardar tempo parametrizável ###############
  // entre a digitação para não submeter a consulta a
  // cada caractere digitado
  debounce: Subject<string> = new Subject<string>();

  nome = 'Haguen'

  constructor(
    private photoService: PhotoService,
    private activatedRoute: ActivatedRoute
    ) {  }

  ngOnInit(): void {
      this.photos = this.activatedRoute.snapshot.data['photos'];
      this.debounce
      // Só vai submeter a consulta após o intervalo de #######################
      // digitação parametrizado abaixo
      .pipe(debounceTime(500))
      .subscribe(filter => this.filter = filter);
  }  
  // Como neste caso não ocorre o comando this.debounce.complete(), ###########
  // já que o debounce precisa ficar "ouvindo" a digitação do usuário
  // o tempo todo, a memória não será liberada quando sair para outra rota,
  // é preciso chamar o método abaixo para destuir o compoente
  ngOnDestroy(): void {
    this.debounce.unsubscribe();
  }  
}
*******************************************************************************
<!-- photo-list.component.html ########################################### -->

<!-- Incluiu debounce em -> (keyup)="debounce.next($event.target.value)" -->

<div class="text-center mt-3 mb-3">
    <form>
        <input
           class="rounded"
            type="search"
            placeholder="search..."
            autofocus
            (keyup)="debounce.next($event.target.value)"
        >
    </form>
</div>

{{ nome | uppercase }}

<ap-photos [photos]="photos | filterByDescription: filter"></ap-photos>
*******************************************************************************
09 Paginação de dados e 10 LoadButton- 22/10/2019 #############################
Para o caso de haverem muitos registros a serem trazidos pela aplicação,
carrega uma parte, depois outra e assim por diante...
*******************************************************************************
Cria o componente do botão via console -> ng g c photos/photo-list/load-button
-> no comando acima -> substitui o "ng generate" -> g significa "generate" e c significa "componente"
*******************************************************************************
<!-- photo-list/load-button.component.html ################################ -->

<!-- If /Else no Angular ################################################## -->

<!-- *ngIf -> para só exibir msg de que não tem mais ##########################
fotos se hasMore for falso -->
<div class="text-center" *ngIf="hasMore; else messageTemplate">
  <button class="btn btn-primary">Load more</button>
</div>

<!-- #messageTemplate -> é usado acima no ngIf ############################ -->
<ng-template #messageTemplate>
  <p class="text-center text-muted">No more data to load</p>
</ng-template>
*******************************************************************************
// photo-list/load-button.component.ts ########################################

import { Component, OnInit, Input } from '@angular/core';

@Component({
  // Retirar um "p" de app-load-button ########################################
  selector: 'ap-load-button',
  templateUrl: './load-button.component.html',
  styleUrls: ['./load-button.component.css']
})
export class LoadButtonComponent implements OnInit {

  @Input() hasMore: boolean = true;

  constructor() { }

  ngOnInit() {
  }
}
*******************************************************************************
// photo.service.ts ############################################################
import { HttpClient, HttpParams } from "@angular/common/http";
import { Injectable } from "@angular/core";
import { Photo } from "./photo";

const API = 'http://localhost:3000';

@Injectable({providedIn: 'root'})
export class PhotoService{

    constructor(private http: HttpClient){
    }
        listFromUser(userName: string){
            return this.http.
            get<Photo[]>(API + '/' + userName + '/photos');
    }

        // Cria método da paginação ###########################################
        listFromUserPaginated(userName: string, page: number) {
            const params = new HttpParams()
                .append('page', page.toString());
        
            return this.http
            .get<Photo[]>(API + '/' + userName + '/photos', { params });
        }
}
*******************************************************************************
// photos.component.ts ########################################################

import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';
import { Photo } from '../../photo/photo';

@Component({
  selector: 'ap-photos',
  templateUrl: './photos.component.html',
  styleUrls: ['./photos.component.css']
})
export class PhotosComponent implements OnChanges {

  // lista de dados que conterá as fotos na tela ##############################
  // Serão 3 colunas por linha ################################################
  @Input() photos: Photo[] = [];
  rows: any[] = [];
 
  constructor() { }

  // ngOnInit() {
  //   this.rows = this.groupColumns(this.photos);
  // }
  // ngOnInit -> Deve ser trocado por ngOnChanges porque ngOnInit #############
  // alimenta o componente apenas na inicialização e o for alimenta ###########
  // o compomente em loop até preencher o grid com tantas fotos ###############
  // quantas o array tiver ####################################################
  ngOnChanges(changes: SimpleChanges){
    if(changes.photos)
    this.rows = this.groupColumns(this.photos);
  }

  // Itera fotos de 3 em 3 ####################################################
  groupColumns(photos: Photo[]){
    const newRows = [];
    
    for(let index = 0; index < photos.length; index+=3) {
      // Adiciona as fotos de 3 em 3 ##########################################
      // Slice = fatia de array de fotos, de 3 em 3 ###########################
      // O primeiro parâmetro de slice é a posição inclusive na ###############
      // qual os elementos serão considerados. O segundo é a posição ##########
      // final (não inclusiva). ###############################################
      newRows.push(photos.slice(index, index + 3));
    }
    return newRows;
  }
}
*******************************************************************************
// /photos/photo-listresolver.ts ##############################################

import { Injectable } from '@angular/core';
import { Resolve, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';
import { Observable } from 'rxjs';

import { PhotoService } from '../../photo/photo.service';
import { Photo } from '../../photo/photo';

@Injectable({ providedIn: 'root'})
export class PhotoListResolver implements Resolve<Observable<Photo[]>>{

    constructor(private service: PhotoService) {}

    // Modifica o resolver para a paginação ###################################
    // Por padrão já carrega os 12 primeiros registros 
    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Photo[]> {
        const userName = route.params.userName;
        return this.service.listFromUserPaginated(userName, 1);
    }
}
*******************************************************************************
<!-- photo-list.component.html ########################################### -->

<div class="text-center mt-3 mb-3">
    <form>
        <input
           class="rounded"
            type="search"
            placeholder="search..."
            autofocus
            (keyup)="debounce.next($event.target.value)"
        >
    </form>
</div>

{{ nome | uppercase }}

<ap-photos [photos]="photos | filterByDescription: filter"></ap-photos>

<!-- Inclusão do botão load more ########################################## -->
<!-- click chama load -> que altera hasMore com dados ou vazio -->
<ap-load-button 
    (click)="load()" 
    [hasMore]="hasMore">
</ap-load-button>
*******************************************************************************
// photo/list/photo-list.component.ts #########################################

import { Component, OnInit, OnDestroy } from '@angular/core';
import { PhotoService } from '../photo/photo.service';
import { ActivatedRoute } from '@angular/router';
import { Subject } from 'rxjs';
import { debounceTime } from 'rxjs/operators';

import { Photo } from '../photo/photo';

@Component({
  selector: 'app-photo-list',
  templateUrl: './photo-list.component.html',
  styleUrls: ['./photo-list.component.css']
})
export class PhotoListComponent implements OnInit, OnDestroy {
  
  photos: Photo[] = [];
  filter: string = '';

  debounce: Subject<string> = new Subject<string>();

  // Adiciona variável para o hasMore #########################################
  hasMore: boolean = true;
  // Adiciona propriedade para numeração da paginação #########################
  currentPage: number = 1;
  // Adiciona propriedade para identificar o usuário que está paginando #######
  userName: string = '';

  nome = 'Haguen'

  constructor(
    // Retorna photoService para alimentar a paginação ########################
    private activatedRoute: ActivatedRoute,
    private photoService: PhotoService
    ) {  }

  ngOnInit(): void {

      // Captura o userName na inicialização ##################################
      this.userName = this.activatedRoute.snapshot.params.userName;

      this.photos = this.activatedRoute.snapshot.data['photos'];
      this.debounce
      .pipe(debounceTime(1000))
      .subscribe(filter => this.filter = filter);
  }  
  
  ngOnDestroy(): void {
    this.debounce.unsubscribe();
  }  

  // Método para carregamento das fotos #######################################
  load() {
    this.photoService
        // ++this.currentPage -> recebe "++" pois o resolver já é #############
        // carregado com dados o precisa passar para o
        // próximo registro
        .listFromUserPaginated(this.userName, ++this.currentPage)
        .subscribe(photos => {
            // push(...photos); -> indica para fazer push de cada #############
            // foto do registro
            // this.photos.push(...photos);
            this.photos = this.photos.concat(photos);
            if(!photos.length) this.hasMore = false;
        });
  }
}
*******************************************************************************
02 Submódulos - 25/10/2019 ####################################################
*******************************************************************************
Criar o arquivo -> photo-list.module.ts em photo-list

// photo-list/photo-list.module.ts ###########################################

import { NgModule } from '@angular/core';
import { PhotoListComponent } from './photo-list.component';
import { PhotosComponent } from './photos/photos.component';
import { LoadButtonComponent } from './load-button/load-button.component';
import { FilterByDescription } from './photos/filter-by-description.pipe';
import { CommonModule } from '@angular/common';
import { PhotoModule } from '../photo/photo.module';

@NgModule({
    declarations: [
        PhotoListComponent,
        PhotosComponent,
        LoadButtonComponent,
        FilterByDescription
    ],
    // Importar CommonModule aqui após criar os submodulos ####################
    imports: [
        CommonModule,
    // Importar PhotoModule aqui após criar os submodulos #####################    
        PhotoModule
    ]
})
export class PhotoListModule {}
*******************************************************************************
Criar o arquivo -> photo-form.module.ts em photo-form

// photo-form/photo-form.module.ts ###########################################

import { NgModule } from '@angular/core';
import { PhotoFormComponent } from './photo-form.component';
import { CommonModule } from '@angular/common';

@NgModule({
    declarations: [PhotoFormComponent],
    // Importar CommonModule aqui após criar os submodulos ####################
    imports: [CommonModule]
})
export class PhotoFormModule { }
*******************************************************************************
Criar o arquivo -> photo.module.ts em photo

// photo/photo.module.ts ######################################################

import { NgModule } from '@angular/core';
import { PhotoComponent } from './photo.component';
import { CommonModule } from '@angular/common';
import { HttpClientModule } from '@angular/common/http';

@NgModule({
    declarations: [PhotoComponent],
    // Importar CommonModule aqui após criar os submodulos ####################
    imports: [CommonModule,
    // Importar HttpClientModule aqui após criar os submodulos ################    
              HttpClientModule  
    ],
    // Exportar PhotoComponent apos criar os submodulos #######################
    exports: [PhotoComponent]
})
export class PhotoModule { }
*******************************************************************************

Alterar photos.module.ts após criar os submodulos #############################

// photos.module.ts ###########################################################

import { NgModule } from "@angular/core";
import { PhotoModule } from './photo/photo.module';
import { PhotoFormModule } from './photo-form/photo-form.module';
import { PhotoListModule } from './photo-list/photo-list.module';

@NgModule({
   imports: [ 
      // photos.module.ts se tornará agregador dos demais modulos #############
      // Chamar os novos modulos criados aqui #################################
      PhotoModule,
      PhotoFormModule,
      PhotoListModule
      // Remover HttpClientModule após criar os submodulos ####################
      // HttpClientModule,
      // Remover CommonModule após criar os submodulos ########################
      // CommonModule         
            ] 
})
export class PhotosModule{
}
*******************************************************************************
03 Integração com Font Awesome - 27/10/2019 - Icones

-> npm install font-awesome@4.7.0 -S
-> No package.json deve aparecer a dependência -> "font-awesome": "^4.7.0",
*******************************************************************************
// package.json ###############################################################
{
  "name": "alurapic",
  "version": "0.0.0",
  "scripts": {
    "ng": "ng",
    "start": "ng serve",
    "build": "ng build",
    "test": "ng test",
    "lint": "ng lint",
    "e2e": "ng e2e"
  },
  "private": true,
  "dependencies": {
    "@angular/animations": "^6.0.3",
    "@angular/common": "^6.0.3",
    "@angular/compiler": "^6.0.3",
    "@angular/core": "^6.0.3",
    "@angular/forms": "^6.0.3",
    "@angular/http": "^6.0.3",
    "@angular/platform-browser": "^6.0.3",
    "@angular/platform-browser-dynamic": "^6.0.3",
    "@angular/router": "^6.0.3",
    "bootstrap": "^4.1.1",
    "core-js": "^2.5.4",
    "font-awesome": "^4.7.0",
*******************************************************************************
-> No angular.json declarar a fonte de "font-awesome"
-> Procurar dentro de NodeModules, expandindo o nó na 
árvore do VisualStudio -> font-awesome -> css ->  No angular.json copiar 
o caminho já existente para o bootstrap.min.css -> 
              "./node_modules/bootstrap/dist/css/bootstrap.min.css"
-> Adicionar a linha copiada abaixo da original em "styles" -> Alterar a 
linha copiada para ficar assim: "./node_modules/font-awesome/css/font-awesome.css"
ATENÇÃO -> Quando alterar o angular.json é preciso reiniciar o AngularCli
*******************************************************************************
<!-- photo-list.component.html ########################################### -->

<!-- Inclusão de ícone para campo pesquisa ############################### -->

<div class="text-center mt-3 mb-3">
    <form>

        <!-- Utilização do font awesome incluída aqui #################### -->
        <!-- Chamar o font awesome -> class="fa -->
        <!-- Icone adicionado -> fa-search -->
        <!-- Afastamento do ícone de dois pixels -> mr-2 -->
        <!-- Para compatibilidade com leitores de acessabilidade, 
            adiionar o parâmetro -> aria-hidden ="true"-->
        <i aria-hidden ="true" class="fa fa-search mr-2"></i>

        <!-- Teste de utilização de outro ícone abaixo ################### -->
        <!-- <i class="fa fa-asymmetrik"></i> -->
        <!-- Endereço com exempos de ícones -> 
        https://fontawesome.com/v4.7.0/examples/ -->
        <i class="fa fa-circle-o-notch fa-spin fa-3x fa-fw"></i>
        <span class="sr-only">Loading...</span>

        <input
           class="rounded"
            type="search"
            placeholder="search..."
            autofocus
            (keyup)="debounce.next($event.target.value)"
        >
    </form>
</div>

{{ nome | uppercase }}

<ap-photos [photos]="photos | filterByDescription: filter"></ap-photos>

<ap-load-button 
    (click)="load()" 
    [hasMore]="hasMore">
</ap-load-button>
*******************************************************************************
<!-- photos/photos.component.html ######################################### -->

<!-- Tratamento para o espaçamento das fotos na tela ###################### -->

<p class="text-center text-muted" *ngIf="!photos.length">
    Sorry, no photos
</p>

<ol class="list-unstyled">
    <!-- Adicionar ao parâmetro class -> no-gutters -> para 
        remover o espaçamento -->
    <li *ngFor="let cols of rows" class="row no-gutters">
        <div *ngFor="let photo of cols" class="col-4">
            <ap-photo
                [url]="photo.url"
                [description]="photo.description">
            </ap-photo>
        </div>
    </li>
</ol>
*******************************************************************************
04 Component container e ng-content - 28/10/2019 

// Likes, comments e cards ####################################################

-> Criar dentro de app as pastas "shared/component/card"
-> Criar dentro da pasta card o arquivo card.component.ts
-> Criar dentro da pasta card o arquivo card.component.html
-> Criar dentro da pasta card  o arquivo card.module.ts

*******************************************************************************
// photo/photo.ts #############################################################

// Mostrar "likes" e "comments" nas fotos exibidas ############################
// Dentro deste arquivo já estão declaradas as 
// variáevis referentes a likes e comments

export interface Photo {
    id:number;
    postDate:Date;
    url:string;
    description:string;
    allowComments:boolean;
    likes:number;
    comments:number;
    userId:number;
}
*******************************************************************************
<!-- shared/component/card/card.component.html ############################ -->

<!-- Criar dentro da pasta card o arquivo card.component.html -->

<div class="card border-light text-center">
    <h4 class="card-header">{{ title }}</h4>
    <div class="card-block text-justify">



        <!-- ng-content -> para informar ao componente os dados a 
            serem carregados na tela-->
        <ng-content></ng-content>
    </div>
</div>
*******************************************************************************
// shared/components/card/card.component.ts ###################################

// Criar dentro da pasta card o arquivo card.component.ts

import { Component, Input } from '@angular/core';

@Component({
    selector: 'ap-card',
    templateUrl: './card.component.html'
})
export class CardComponent { 
    @Input() title: string = '';
}
*******************************************************************************
// photo-list/photo-list.module.ts ###########################################

import { NgModule } from '@angular/core';
import { PhotoListComponent } from './photo-list.component';
import { PhotosComponent } from './photos/photos.component';
import { LoadButtonComponent } from './load-button/load-button.component';
import { FilterByDescription } from './photos/filter-by-description.pipe';
import { CommonModule } from '@angular/common';
import { PhotoModule } from '../photo/photo.module';
import { CardModule } from 'src/app/shared/components/card/card.module';

@NgModule({
    declarations: [
        PhotoListComponent,
        PhotosComponent,
        LoadButtonComponent,
        FilterByDescription
    ],
    imports: [
        CommonModule,
        PhotoModule,


        
        // Importar CardModule após criar o componente ########################
        CardModule
    ]
})
export class PhotoListModule {}
*******************************************************************************
<!-- photos/photos.component.html ######################################### -->

<!-- Tratamento para o espaçamento das fotos na tela ###################### -->

<p class="text-center text-muted" *ngIf="!photos.length">
    Sorry, no photos
</p>

<ol class="list-unstyled">


    <!-- Adicionar ao parâmetro class -> no-gutters -> para 
        remover o espaçamento -->
    <li *ngFor="let cols of rows" class="row no-gutters">
        <div *ngFor="let photo of cols" class="col-4">


            <!-- [title]="photo.description -> exibe a descrição das fotos -->
            <ap-card [title]="photo.description">    
                <ap-photo
                    [url]="photo.url"
                    [description]="photo.description">
                </ap-photo>






                

                <!-- Adição de itens de tela para registrar likes e comments -->
                <!-- fa-1x -> define o tamanho do icone -->
                <!-- mr-2 -> define margem direita com 2 pixels -->
                <!-- class=text-center -> centraliza os ícones -->
                <div class="text-center p-1">
                    <i aria-hidden="true" class="fa fa-heart-o fa-1x mr-2"></i>{{ photo.likes }}
                    <i aria-hidden="true" class="fa fa-comment-o fa-1x mr-2 ml-2"></i>{{ photo.comments }}
                </div>  
            </ap-card>  
        </div>
    </li>
</ol>
*******************************************************************************
// shared/component/card/card.module.ts


// Compomente transformado em modulo para que possa ser importado por 
// todos os outros modulos da aplicação

// Criar dentro da pasta card  o arquivo card.module.ts

import { NgModule } from '@angular/core';
import { CardComponent } from './card.component';
import { CommonModule } from '@angular/common';

@NgModule({
    declarations: [CardComponent],
    exports: [CardComponent],


    
    // Importar Commonmodule como boa pratica para ############################ 
    // atender a eventuais uso futuros
    imports: [CommonModule]
})
export class CardModule { }
*******************************************************************************
06 Componentizando o filtro - 29/10/2019 ######################################
07 Output property - 29/10/2019 ###############################################
*******************************************************************************
<!-- photo-list.component.html ############################################ -->

<!--  Dentro de "photos" criar a pasta "search" e dentro ###################### 
    desta pasta criar os arquivos 
     "search.component.html" e "search.component.ts" -->

<!-- Inserir "<ap-search><" como chamada para o ############################### 
    componente filtro criado -->

<!-- (onTyping) -> para receber o que for ##################################### 
        digitado na caixa de texto do filtro e armazenar em "$event" -->
        
<!-- [value]="filter" para limpar o valor do filtro após ######################
        o usuário digitar algum valor e clicar em "loadMore" -->

<ap-search 
    (onTyping)="filter = $event" [value]="filter">
</ap-search>

{{ nome | uppercase }}

<ap-photos [photos]="photos | filterByDescription: filter"></ap-photos>

<ap-load-button 
    (click)="load()" 
    [hasMore]="hasMore">
</ap-load-button>
*******************************************************************************
// search.component.ts ########################################################

import { Component, OnInit, OnDestroy, Output, EventEmitter, Input } from '@angular/core';
import { Subject } from 'rxjs';
import { debounceTime } from 'rxjs/operators';

@Component({
    selector: 'ap-search',
    templateUrl: './search.component.html'
})
export class SearchComponent implements OnInit, OnDestroy  { 

    // Criar chamada para EventEmitter para trabalhar #########################
    // com onTyping usado em photo-list.component.html
    @Output() onTyping = new EventEmitter<string>();
    
    // Limpa o valor do filtro após o usuário digitar algum valor #############
    @Input() value: string = '';

    // Tipagem com <string> pois o dado que será passado é string #############
    debounce: Subject<string> = new Subject<string>();
 
    ngOnInit(): void {
        this.debounce
        .pipe(debounceTime(1000))

    // subscribe passa a trabalhar com o onTyping #############################
    // após o tempo parametrizado em debounceTime emite o 
    // evento carregado por onTyping
    .subscribe(filter => this.onTyping.emit(filter));
} 

ngOnDestroy(): void {
    this.debounce.unsubscribe();
  }
}  
*******************************************************************************
// photo/list/photo-list.component.ts #########################################

import { Component, OnInit } from '@angular/core';
import { PhotoService } from '../photo/photo.service';
import { ActivatedRoute } from '@angular/router';

import { Photo } from '../photo/photo';

@Component({
  selector: 'app-photo-list',
  templateUrl: './photo-list.component.html',
  styleUrls: ['./photo-list.component.css']
})

export class PhotoListComponent implements OnInit {  
  
  photos: Photo[] = [];

  // Inicializa a variaǘel do campo de pesquisa com vazio #####################
  filter: string = '';
  hasMore: boolean = true;
  currentPage: number = 1;
  userName: string = '';

  nome = 'Haguen'

  constructor(
    private activatedRoute: ActivatedRoute,
    private photoService: PhotoService
    ) {  }

  ngOnInit(): void {

      this.userName = this.activatedRoute.snapshot.params.userName;
      this.photos = this.activatedRoute.snapshot.data['photos'];
  }  
  
  load() {
    this.photoService
        .listFromUserPaginated(this.userName, ++this.currentPage)
        .subscribe(photos => {
            // Para limpar o filtro após o usuário digitar algum ############## 
            // valor e clicar no botão loadMore
            this.filter = '';
            this.photos = this.photos.concat(photos);
            if(!photos.length) this.hasMore = false;
        });
  }
}
*******************************************************************************
<!-- search.component.html ################################################ -->

<!-- [value]="value" -> recebe o valor da var filter para limpar 
    o campo de pesquisa após o usuário clicar em load more -->

<div class="text-center mt-3 mb-3">
    <form>
        <i aria-hidden ="true" class="fa fa-search mr-2"></i>
        <i class="fa fa-circle-o-notch fa-spin fa-3x fa-fw"></i>
        <span class="sr-only">Loading...</span>
        <input
            class="rounded"
            type="search"
            placeholder="search..."
            autofocus
            (keyup)="debounce.next($event.target.value)"
            [value]="value" 
        >
    </form>
</div>    
*******************************************************************************
// photo-list/photo-list.module.ts ###########################################

import { NgModule } from '@angular/core';
import { PhotoListComponent } from './photo-list.component';
import { PhotosComponent } from './photos/photos.component';
import { LoadButtonComponent } from './load-button/load-button.component';
import { FilterByDescription } from './photos/filter-by-description.pipe';
import { CommonModule } from '@angular/common';
import { PhotoModule } from '../photo/photo.module';
import { CardModule } from 'src/app/shared/components/card/card.module';
import { SearchComponent } from './search/search.component';

@NgModule({
    declarations: [
        PhotoListComponent,
        PhotosComponent,
        LoadButtonComponent,
        FilterByDescription,
        // Adicionar chamada para o componente filtro criado ##################
        SearchComponent
    ],
    imports: [
        CommonModule,
        PhotoModule,
        CardModule
    ]
})
export class PhotoListModule {}
*******************************************************************************
10 Terminando a implementação da diretiva - 30/10/2019 ########################

Criando efeito de escurecimento ao passar o mouse sobre elementos da tela

*******************************************************************************
// shared/directives/darken-on-hover.module.ts ################################

// Criar o arquivo e a pasta a seguir ######################################### 
// dentro de "shared" -> directives/darken-on-hover.module.ts

import { NgModule } from '@angular/core';
import { DarkenOnHoverDirective } from './darken-on-hover.directive';

@NgModule({
    declarations: [ DarkenOnHoverDirective ],
    exports: [ DarkenOnHoverDirective ]
})
export class DarkenOnHoverModule { }
*******************************************************************************
// shared/directives/darken-on-hover.directive.ts #############################

// Criar o arquivo e a pasta a seguir ######################################### 
// dentro de "shared" -> directives/darken-on-hover.directive.ts

import { Directive, ElementRef, HostListener, Renderer, Input } from '@angular/core';

// Selector entre colchetes para poder ser usado como ######################### 
// atributo nas tags html e componentes
@Directive({
    selector: '[apDarkenOnHover]'
})
export class DarkenOnHoverDirective { 

    // Cria var com valor incial que pode ser sobrescrito em outros ###########
    // pontos da aplicação com outros valores
    @Input() brightness = '70%';

    constructor(private el: ElementRef,
                // Modulo Render para manipular o DOM #########################
                private render: Renderer    ) {
    }

    // Metodo para capturar o movimento do mouse sobre ########################
    // os elementos da tela
    // this.el.nativeElement -> Acesso aos elemento nativos do DOM aonde a ####
    // diretiva foi adicionada
    // Modulo Render para manipular o DOM #####################################
    @HostListener('mouseover')
    darkenOn(){
        console.log('darkenOn');
        // brightness(70%) -> vai reduzir o brilho para 70% ao passar #########
        // o mouse em cima do elemento
        // ${this.brightness} -> carrega o valor inical que pode ##############
        //  ser sobrescrito em outros pontos da aplicação
        this.render.setElementStyle(this.el.nativeElement, 'filter', `brightness(${this.brightness})`);
    }
    
    @HostListener('mouseleave')
    darkenOff() {
         // brightness(100%) -> retorna o brilho para 100% ao remover ##########
        // o mouse de cima do elemento
        this.render.setElementStyle(this.el.nativeElement, 'filter', 'brightness(100%)');
    }
}    
*******************************************************************************
// photo-list/photo-list.module.ts ###########################################

import { NgModule } from '@angular/core';
import { PhotoListComponent } from './photo-list.component';
import { PhotosComponent } from './photos/photos.component';
import { LoadButtonComponent } from './load-button/load-button.component';
import { FilterByDescription } from './photos/filter-by-description.pipe';
import { CommonModule } from '@angular/common';
import { PhotoModule } from '../photo/photo.module';
import { CardModule } from 'src/app/shared/components/card/card.module';
import { SearchComponent } from './search/search.component';
import { DarkenOnHoverModule } from 'src/app/shared/directives/darken-on-hover.module';

@NgModule({
    declarations: [
        PhotoListComponent,
        PhotosComponent,
        LoadButtonComponent,
        FilterByDescription,
        SearchComponent
    ],
    imports: [
        CommonModule,
        PhotoModule,
        CardModule,
        // Importa DarkenOnHoverModule para uso por todos os ##################
        // compomentes da aplicação
        DarkenOnHoverModule
    ]
})
export class PhotoListModule {}
*******************************************************************************
<!-- photos/photos.component.html ######################################### -->

<p class="text-center text-muted" *ngIf="!photos.length">
    Sorry, no photos
</p>
<ol class="list-unstyled">
    <li *ngFor="let cols of rows" class="row no-gutters">



        
        <!-- apDarkenOnHover pode ser usado como atributo na tag
             html como na tag abaixo -->
        <div *ngFor="let photo of cols" class="col-4" apDarkenOnHover>


            <ap-card [title]="photo.description">    
                <ap-photo
                    [url]="photo.url"
                    [description]="photo.description">
                </ap-photo>
                <div class="text-center p-1">
                    <i aria-hidden="true" class="fa fa-heart-o fa-1x mr-2"></i>{{ photo.likes }}
                    <i aria-hidden="true" class="fa fa-comment-o fa-1x mr-2 ml-2"></i>{{ photo.comments }}
                </div>  
            </ap-card>  
        </div>
    </li>
</ol>
*******************************************************************************
<!-- photo-list.component.html ############################################ -->

<!-- Adiciona Título na página com barra colorida para testar o ###############
    escurecimento do elemento ao passar o mouse 
    em cima usando otributo apDarkenOnHover-->
<!-- brightness="20%" -> é sobrescrito com outro valor para teste ######### -->
<h1 style="background: blue" apDarkenOnHover brightness="20%">Photos</h1>

<ap-search 
    (onTyping)="filter = $event" [value]="filter">
</ap-search>

{{ nome | uppercase }}

<ap-photos [photos]="photos | filterByDescription: filter"></ap-photos>

<ap-load-button 
    (click)="load()" 
    [hasMore]="hasMore">
</ap-load-button>

<!-- Todo componente é uma diretiva que possui template. No entanto, ##########
     uma diretiva em seu estado bruto não possui templates. -->

<!-- Podemos usar uma diretiva como atributo envolvendo o valor do ############
    seu seletor entre colchetes -->

<!-- Podemos injetar no constructor da diretiva uma referência para ###########
    o elemento no qual ela foi associada. Angular nos dá acesso ao 
    elemento através do wrapper ElementRef. -->
*******************************************************************************
<!-- shared/component/card/card.component.html ############################ -->

<div class="card border-light text-center">




    <!-- No card, se a foto não tiver título, a moldura será recuada ##########
        por conta da ausência do texto -->
    <h4 class="card-header" *ngIf="title">{{ title }}</h4>
    <div class="card-block text-justify">
        <ng-content></ng-content>
    </div>
</div>
*******************************************************************************
###############################################################################
Imprimir array em duas colunas distintas:

https://stackoverflow.com/questions/49820255/bootstrap-using-row-col-with-angular-list-ordering

A saída deve ser:
*******************************************************************************
a     e
b     f
c     g
d     h
*******************************************************************************

You don't want the for loop on the columns, you want just two columns.

So, you want the for loop on whats inside the column, and in the first column you want the first half the list (i <= items.length / 2)

and in the second column you want the second half the list (i > items.length / 2)

*******************************************************************************
let items: Array<string> = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];

<div class="row">
    <div class="col-md-6">
        <div  *ngFor="let item of items; let i = index">
            <span *ngIf="i < items.length/2">{{ item }}</span>
        </div>
    </div>
        <div class="col-md-6">
            <div  *ngFor="let item of items; let i = index">
                <span *ngIf="i >= items.length/2">{{ item }}</span>
            </div>
        </div>
    </div>
</div>
*******************************************************************************
# Módulo 2 - 03 O componente de login - 02/11/2019 ############################
-> Criação de tela de login:
-> Criar dentro de "app" o caminho de pastas -> "home/signin" -> e dentro de
"signin" criar os arquivos "signin.component.ts" e "signin.component.html" 
-> Criar dentro de "home" o arquivo "home.module.ts"
*******************************************************************************
<!-- app/home/signin/signin.component.html ******************************** -->

<h4 class="text-center">Login</h4>

<form class="form mt-4">

    <!-- form-group -> Estilo do bootstrap ******************************** -->
    <div class="form-group">
        <input 
            class="form-control" 
            placeholder="user name" 
            autofocus>  
    </div>

    <div class="form-group">
        <input
            type="password" 
            class="form-control" 
            placeholder="password">              
    </div>

    <!-- btn-block -> expande de acordo com o tamanho da tela ************* -->
    <button 
        type="submit" 
        class="btn btn-primary btn-block">
        login
    </button>

</form>
<p>Not a user?<a>Register now</a></p>
*******************************************************************************
// app/home/signin/signin.component.ts ****************************************

import { Component } from '@angular/core';

@Component({
    // Não precisa declarar o "selector" pois este componente em específico ***
    //  não será usado por outros componentes
    // Também não precisa de "Exports" pois este componente não é *************
    // chamado por outros componentes
    templateUrl: './signin.component.html'
})
export class SignInComponent { }
*******************************************************************************
// app.module.ts ##############################################################

import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppComponent } from './app.component';
import { PhotosModule } from './photos/photos.module';
import { AppRoutingModule } from './app.routing.module';
import { ErrorsModule } from './errors/errors.module';
import { HomeModule } from './home/home.module';

@NgModule({
  declarations: [
    AppComponent,
  ],
  imports: [
    BrowserModule,
    PhotosModule,
    AppRoutingModule,
    ErrorsModule,
    // Importa o modulo da página de login ************************************
    HomeModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }

// Para testar a exibição da tela de login -> colocar *************************
// no browser -> http://localhost:4200/ 

// AppModule é sempre o primeiro a ser carregado e carrega os *****************
// outros posteriormente
*******************************************************************************
// app.routing.module.ts ######################################################

import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';

import { PhotoListComponent } from './photos/photo-list/photo-list.component';
import { NotFoundComponent } from './errors/not-found/not-found.component';
import { PhotoListResolver } from './photos/photo-list/photos/photo-listresolver';
import { SignInComponent } from './home/signin/signin.component';

const routes: Routes = [


    
    
        // Inclusão de rota para a tela de login ******************************
        // "{path: ''," com aspas em branco equivale a "localhost:4200/" ******
        {path: '',
         component: SignInComponent
        },

        {path: 'user/:userName', 
            component: PhotoListComponent,
            resolve:{
                photos: PhotoListResolver
            }
        },
        {path: 'p/add', 
        component: PhotoListComponent
        },
        {path: '**', 
        component: NotFoundComponent
        }
];

@NgModule({
    imports: [RouterModule.forRoot(routes)],
    exports: [RouterModule]
})

export class AppRoutingModule{
}
*******************************************************************************
// app/home/home.module.ts ****************************************************

import { NgModule } from '@angular/core';
import { SignInComponent } from './signin/signin.component';

@NgModule({
    declarations: [ SignInComponent ]
})
export class HomeModule { }
*******************************************************************************
04 Validação de formulários - Validação da tela de login - 03/11/2019 #########

// app/home/signin/signin.component.ts ****************************************

import { Component, OnInit } from '@angular/core';
import { FormGroup, FormBuilder, Validators } from '@angular/forms';

@Component({
    templateUrl: './signin.component.html'
})
export class SignInComponent implements OnInit {
   
    loginForm: FormGroup;

    // Injetando artefato na classe *******************************************
    constructor(private formBuilder: FormBuilder) { }

    ngOnInit(): void {
        // group() -> implementa FormGroup declarado mais acima ***************
        // Os campos "userName" e "password" precisam ser linkados ************
        // com os campos correspndentes em signin.component.html
        this.loginForm = this.formBuilder.group({

            // Exemplo com dados mocados **************************************
            // userName: ['flavio'],
            // password: ['123']

            // Importar "Validators" para validação para os textfields
            // "userName: ['', Validators.required]," -> torna o campo ********
            //  obrigatório
            userName: ['', Validators.required],
            password: ['', Validators.required]
        });
    } 
 }
*******************************************************************************
<!-- app/home/signin/signin.component.html ******************************** -->

<h4 class="text-center">Login</h4>

<!-- Link com "loginForm: FormGroup;" vindo de "signin.component.ts" ****** -->
<form [formGroup]="loginForm" class="form mt-4">

    <div class="form-group">
        <!-- formControlName linka com "userName" vindo ***********************
             de "signin.component.ts" -->
        <input 
            formControlName="userName"
            class="form-control" 
            placeholder="user name" 
            autofocus>  

        <!-- Exibe texto de validação do campo usuário ******************** -->



        <!-- "text-danger" -> classe do bootstrap para ************************
            deixar o texto vermelho -->



        <!-- "d-block" -> para a msg ficar em baixo do textfield ********** -->
        <!-- "*ngIf=" -> Para só exibir msg de erro se o campo ****************
             for submetido vazio -->



        <!-- ".errors.required" -> linka com "required" vindo *****************
            de "Validators.required" em "signin.component.ts" -->



        <!-- "errors?.required" -> colocar "?" para que ***********************
            errors só chame .required se houver erro -->
        <small
            *ngIf="loginForm.get('userName').errors?.required"
            class="text-danger d-block mt-2">
            User name is required!
        </small>
    </div>

    <div class="form-group">
        <!-- formControlName linka com "password" vindo ***********************
             de "signin.component.ts" -->
        <input
            formControlName="password"
            type="password" 
            class="form-control" 
            placeholder="password">     
                        
        <!-- Exibe texto de validação do campo senha  ********************* -->
        <small
            *ngIf="loginForm.get('password').errors?.required"
            class="text-danger d-block mt-2">
            Password is required!
        </small>
    </div>



    <!-- [disabled]="loginForm.invalid" -> Só habilita o botão ****************
        submit se todos os campos estiverem preenchidos com algum valor -->
    <button 
        [disabled]="loginForm.invalid"
        type="submit" 
        class="btn btn-primary btn-block">
        login
    </button>

</form>

<p>Not a user?<a>Register now</a></p>
*******************************************************************************
// app/home/home.module.ts ****************************************************

import { NgModule } from '@angular/core';
import { SignInComponent } from './signin/signin.component';

import { ReactiveFormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';

@NgModule({
    declarations: [ SignInComponent ],
    // Importa "ReactiveFormsModule" para validação das ***********************
    // textboxes da tela de login ***********
    imports: [ ReactiveFormsModule,
    //  Importar "CommonModule" para poder usar o ngIf em *********************
    // signin.component.html
                CommonModule ]
})
export class HomeModule { }
*******************************************************************************
# 06 Componentizando mensagens de validação - 05/11/2019 ######################

-> Criar dentro de "app/shared" a pasta "vmessage" com os arquivos "vmessage.component.ts", "vmessage.component.html" e "vmessage.module.ts"
*******************************************************************************
<!-- app/shared/vmessage.component.html *********************************** -->

<small class="text-danger d-block mt-2">
    {{text}}
</small>
*******************************************************************************
// app/shared/vmessage.component.ts *******************************************

import { Component, Input } from '@angular/core';

@Component({
    selector: 'ap-vmessage',
    templateUrl: './vmessage.component.html'
})
export class VMessageComponent { 
    // Envia a msg para "{{text}}" em "vmessage.component.html" ***************
    @Input() text = '';
 }
*******************************************************************************
<!-- app/home/signin/signin.component.html ******************************** -->

<h4 class="text-center">Login</h4>

<form [formGroup]="loginForm" class="form mt-4">
    <div class="form-group">
        <input 
            formControlName="userName"
            class="form-control" 
            placeholder="user name" 
            autofocus>  




        <!-- Chamada para o componente ap-vmessage ************************ -->
        <ap-vmessage 
            *ngIf="loginForm.get('userName').errors?.required"
            text="User is required !">
        </ap-vmessage>    





        <!-- Retira da tag small abaixo a chamada para o ngIf e ***************
            passa para dentro de vmessage -->
        <!-- <small
        *ngIf="loginForm.get('userName').errors?.required"
            class="text-danger d-block mt-2">
            User name is required!
        </small> -->
    </div>
    <div class="form-group">
        <input
            formControlName="password"
            type="password" 
            class="form-control" 
            placeholder="password"> 



            
        <!-- Também retirar a tag small referente *****************************
            ao campo senha e trocar pela tag vmessage correspondente-->
        <ap-vmessage 
            *ngIf="loginForm.get('password').errors?.required"
            text="Password is required!">
        </ap-vmessage>        
        <!-- <small
            *ngIf="loginForm.get('password').errors?.required"
            class="text-danger d-block mt-2">
            Password is required!
        </small> -->
    </div>
    <button 
        [disabled]="loginForm.invalid"
        type="submit" 
        class="btn btn-primary btn-block">
        login
    </button>
</form>

<p>Not a user?<a>Register now</a></p>
*******************************************************************************
// app/home/home.module.ts ****************************************************

import { NgModule } from '@angular/core';
import { SignInComponent } from './signin/signin.component';

import { ReactiveFormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { VMessageModule } from '../shared/vmessage/vmessage.module';

@NgModule({
    declarations: [ SignInComponent ],
    imports: [ ReactiveFormsModule,
                CommonModule,
                // Importar VMessageModule ************************************
                VMessageModule ]
})
export class HomeModule { }
*******************************************************************************
// app/shared/vmessage.module.ts **********************************************

import { NgModule } from '@angular/core';
import { VMessageComponent } from './vmessage.component';

@NgModule({
    declarations: [ VMessageComponent ],
    exports: [ VMessageComponent ]
})
export class VMessageModule { }
*******************************************************************************
07 Enviando credenciais para a API - 07/11/2019 ###############################
-> Geração de serviço de autenticação com pATA -> No console
 -> ng g s core/auth -> Deve ter sido criada a pasta "app/core" com os 
arquivos "auth.service.spec.ts" e "auth.service.ts"
*******************************************************************************
// app/core/auth.service.ts ***************************************************

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';

const API_URL = 'http://localhost:3000';

@Injectable({
  providedIn: 'root'
})
export class AuthService {


  

  // Declarar http: HttpClient para trabalhar com requisições assíncronas *****
  constructor(private http: HttpClient) { }



  // Método para o serviço de autenticação ************************************
  authenticate(userName: string, password: string) {

    return this.http.post(API_URL + '/user/login', { userName, password } )
  }
}

*******************************************************************************
<!-- app/home/signin/signin.component.html ******************************** -->

<h4 class="text-center">Login</h4>




<!-- Utiliza o submit dos dados de login para invocar o ***********************
     método login criado em "signin.component.ts" com Event Biding no submit-->
<form [formGroup]="loginForm" class="form mt-4" (submit)="login()">
    <div class="form-group">
        <input 
            formControlName="userName"
            class="form-control" 
            placeholder="user name" 
            autofocus>  
        <ap-vmessage 
            *ngIf="loginForm.get('userName').errors?.required"
            text="User is required !">
        </ap-vmessage>    
    </div>
    <div class="form-group">
        <input
            formControlName="password"
            type="password" 
            class="form-control" 
            placeholder="password"> 
        <ap-vmessage 
            *ngIf="loginForm.get('password').errors?.required"
            text="Password is required!">
        </ap-vmessage>        
    </div>
    <button 
        [disabled]="loginForm.invalid"
        type="submit" 
        class="btn btn-primary btn-block">
        login
    </button>
</form>

<p>Not a user?<a>Register now</a></p>
*******************************************************************************
// app/home/signin/signin.component.ts ****************************************

import { Component, OnInit } from '@angular/core';
import { FormGroup, FormBuilder, Validators } from '@angular/forms';
import { AuthService } from 'src/app/core/auth.service';

@Component({
    templateUrl: './signin.component.html'
})
export class SignInComponent implements OnInit {
   
    loginForm: FormGroup;

    constructor(private formBuilder: FormBuilder,


        
            // Importar serviço de autenticação ******************************* 
            private authService: AuthService) { }

    ngOnInit(): void {
        this.loginForm = this.formBuilder.group({

            userName: ['', Validators.required],
            password: ['', Validators.required]
        });

    }
    
    // Criar método para login ************************************************
    login() {

        const userName = this.loginForm.get('userName').value;
        const password = this.loginForm.get('password').value;
    
        this.authService
            .authenticate(userName, password)
            .subscribe(
                () => console.log('autenticado'),
                err => {
                    console.log(err);
                    // Limpa o form em caso de erro ***************************
                    this.loginForm.reset();
                    alert('Invalid user name or password')
                }
            );
    }
 }
*******************************************************************************
// app/core/auth.service.spec.ts **********************************************

import { TestBed, inject } from '@angular/core/testing';

import { AuthService } from './auth.service';

describe('AuthService', () => {
  beforeEach(() => {
    TestBed.configureTestingModule({
      providers: [AuthService]
    });
  });

  it('should be created', inject([AuthService], (service: AuthService) => {
    expect(service).toBeTruthy();
  }));
});
*******************************************************************************
08 Redirecionamento pós login - 09/11/2019 ####################################

// app/home/signin/signin.component.ts ****************************************

import { Component, OnInit } from '@angular/core';
import { FormGroup, FormBuilder, Validators } from '@angular/forms';
import { AuthService } from 'src/app/core/auth.service';
import { Router } from '@angular/router';

@Component({
    templateUrl: './signin.component.html'
})
export class SignInComponent implements OnInit {
   
    loginForm: FormGroup;

    constructor(private formBuilder: FormBuilder,
            private authService: AuthService,



            
            // Importar serviço router para redirecionar **********************
            //  após a tela de login
            private router: Router) { }

    ngOnInit(): void {
        this.loginForm = this.formBuilder.group({

            userName: ['', Validators.required],
            password: ['', Validators.required]
        });

    }
    
    login() {

        const userName = this.loginForm.get('userName').value;
        const password = this.loginForm.get('password').value;
    
        this.authService
            .authenticate(userName, password)
            .subscribe(




                // Navega para a tela do usuário logado ***********************
                //  após a tela de login
                // () => console.log('autenticado'),





                // () => this.router.navigateByUrl ****************************
                // ('user/' + userName), -> esse comando funciona porém 
                // necessita de concatenação das várias camadas da rota. 
                // segue abaixo comando mais simples





                // Navega utilizando 'user' declarado *************************
                // em "app.routing.module.ts"
                () => this.router.navigate(['user', userName]),
                err => {
                    console.log(err);
                    this.loginForm.reset();
                    alert('Invalid user name or password')
                }
            );
    }
 }
*******************************************************************************
// app.routing.module.ts ######################################################

import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';

import { PhotoListComponent } from './photos/photo-list/photo-list.component';
import { NotFoundComponent } from './errors/not-found/not-found.component';
import { PhotoListResolver } from './photos/photo-list/photos/photo-listresolver';
import { SignInComponent } from './home/signin/signin.component';

const routes: Routes = [

        {path: '',
         component: SignInComponent
        },


        
        // Envia o "user" para navegação em "signin.component.ts" *************
        {path: 'user/:userName', 
            component: PhotoListComponent,
            resolve:{
                photos: PhotoListResolver
            }
        },
        {path: 'p/add', 
        component: PhotoListComponent
        },
        {path: '**', 
        component: NotFoundComponent
        }
];

@NgModule({
    imports: [RouterModule.forRoot(routes)],
    exports: [RouterModule]
})

export class AppRoutingModule{
}
*******************************************************************************
// app/home/home.module.ts ****************************************************

import { NgModule } from '@angular/core';
import { SignInComponent } from './signin/signin.component';

import { ReactiveFormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { VMessageModule } from '../shared/vmessage/vmessage.module';
import { RouterModule } from '@angular/router';

@NgModule({
    declarations: [ SignInComponent ],
    imports: [ ReactiveFormsModule,
                CommonModule,
                VMessageModule,
                // Importar RouterModule **************************************
                RouterModule ]
})
export class HomeModule { }
*******************************************************************************
10 ViewChild: obtendo referências do template - 12/11/2019 ####################





Manter foco em campo em caso de msg de erro ***********************************
// app/home/signin/signin.component.ts ****************************************

import { Component, OnInit, ElementRef, ViewChild } from '@angular/core';
import { FormGroup, FormBuilder, Validators } from '@angular/forms';
import { AuthService } from 'src/app/core/auth.service';
import { Router } from '@angular/router';

@Component({
    templateUrl: './signin.component.html'
})
export class SignInComponent implements OnInit {
   
    loginForm: FormGroup;

    // Manter foco no campo texto em caso de msg de erro **********************
    // Utiliza #userNameInput vindo de signin.component.html ******************
    @ViewChild('userNameInput') userNameInput: ElementRef<HTMLInputElement>;

    constructor(
            private formBuilder: FormBuilder,
            private authService: AuthService,
            private router: Router
            ) { }

    ngOnInit(): void {
        this.loginForm = this.formBuilder.group({

            userName: ['', Validators.required],
            password: ['', Validators.required]
        });

    }
    
    login() {
        const userName = this.loginForm.get('userName').value;
        const password = this.loginForm.get('password').value;
    
        this.authService
            .authenticate(userName, password)
            .subscribe(
                () => this.router.navigate(['user', userName]),
                err => {
                    console.log(err);
                    this.loginForm.reset();



                    // Manter foco no campo texto em ************************** 
                    // caso de msg de erro
                    this.userNameInput.nativeElement.focus();
                    alert('Invalid user name or password')
                }
            );
    }
 }
*******************************************************************************
<!-- app/home/signin/signin.component.html ******************************** -->

<h4 class="text-center">Login</h4>

<form [formGroup]="loginForm" class="form mt-4" (submit)="login()">
    <div class="form-group">
        


        <!-- #userNameInput -> Para manter foco no campo em *******************
            caso de msg de erro -->
        <input #userNameInput 
            formControlName="userName"
            class="form-control" 
            placeholder="user name" 
            autofocus>  
        <ap-vmessage 
            *ngIf="loginForm.get('userName').errors?.required"
            text="User is required !">
        </ap-vmessage>    
    </div>
    <div class="form-group">
        <input
            formControlName="password"
            type="password" 
            class="form-control" 
            placeholder="password"> 
        <ap-vmessage 
            *ngIf="loginForm.get('password').errors?.required"
            text="Password is required!">
        </ap-vmessage>        
    </div>
    <button 
        [disabled]="loginForm.invalid"
        type="submit" 
        class="btn btn-primary btn-block">
        login
    </button>
</form>

<p>Not a user?<a>Register now</a></p>
*******************************************************************************
12 Detectando a plataforma de execução - 13/11/2019 ###########################
-> Identificação do navegador de execução da aplcação *************************
-> Criar a pasta "auth" dentro de "core" e mover para dentro os 
arquivos "auth.service.spec.ts" e "auth.service.ts"
-> ATENÇÃO -> Se der erro após mover, reiniciar o servidor
-> Dentro de "core" criar a pasta "platform-detector" e dentro desta
pasta criar o arquivo "platform-detector.service.ts"
*******************************************************************************
// app/home/signin/signin.component.ts ****************************************






import { Component, OnInit, ElementRef, ViewChild } from '@angular/core';
import { FormGroup, FormBuilder, Validators } from '@angular/forms';
import { AuthService } from 'src/app/core/auth/auth.service';
import { Router } from '@angular/router';
import { PlatformDetectorService } from 'src/app/core/platform-detector/platform-detector.service';

@Component({
    templateUrl: './signin.component.html'
})
export class SignInComponent implements OnInit {
   
    loginForm: FormGroup;

    @ViewChild('userNameInput') userNameInput: ElementRef<HTMLInputElement>;

    constructor(
            private formBuilder: FormBuilder,
            private authService: AuthService,
            private router: Router,
            private platformDetectionService: PlatformDetectorService
            ) { }

    ngOnInit(): void {
        this.loginForm = this.formBuilder.group({

            userName: ['', Validators.required],
            password: ['', Validators.required]
        });

    }
    
    login() {
        const userName = this.loginForm.get('userName').value;
        const password = this.loginForm.get('password').value;
    
        this.authService
            .authenticate(userName, password)
            .subscribe(
                () => this.router.navigate(['user', userName]),
                err => {
                    console.log(err);
                    this.loginForm.reset();


                    // Identifica o navegador de execução *********************
                    // da aplcação e condiciona a só executar se estiver 
                    // em um navegador e não em um servidor
                    this.platformDetectionService.isPlatformBrowser() &&


                    this.userNameInput.nativeElement.focus();
                    alert('Invalid user name or password')
                }
            );
    }
 }
*******************************************************************************
// platform-detector.service.ts ***********************************************

import { Injectable, Inject, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';

@Injectable({ providedIn: 'root' })
export class PlatformDetectorService {

    // Injection token -> PLATFORM_ID *****************************************
    constructor(@Inject(PLATFORM_ID) private platformId: string) { }

    isPlatformBrowser() {
        return isPlatformBrowser(this.platformId);
    }
}
*******************************************************************************
// app/core/auth/auth.service.ts **********************************************



// Mover para dentro da pasta "auth" ******************************************
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';

const API_URL = 'http://localhost:3000';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  constructor(private http: HttpClient) { }
  authenticate(userName: string, password: string) {
    return this.http.post(API_URL + '/user/login', { userName, password } )
  }
}
*******************************************************************************
// app/core/auth/auth.service.spec.ts *****************************************



// Mover para dentro da pasta "auth" ******************************************
import { TestBed, inject } from '@angular/core/testing';
import { AuthService } from './auth.service';

describe('AuthService', () => {
  beforeEach(() => {
    TestBed.configureTestingModule({
      providers: [AuthService]
    });
  });

  it('should be created', inject([AuthService], (service: AuthService) => {
    expect(service).toBeTruthy();
  }));
});
*******************************************************************************
02 Acesso do header de resposta - 14/11/2019 ##################################





-> Confirmar que o usuário está logado - Token ********************************
-> Para usar em partes da aplicação aonde apenas
 usuáros logados podem acessar;

// app/core/auth/auth.service.ts **********************************************

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { tap } from 'rxjs/operators';

const API_URL = 'http://localhost:3000';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  constructor(private http: HttpClient) { }
  authenticate(userName: string, password: string) {

    
    

    // Armazena dados do usuário logado com sucesso em ************************
    // um token que é usado como chave de acesso a
    //  áreas restritas do sistema
    return this.http
    .post(
      API_URL + '/user/login',
       { userName, password },
        {observe: 'response'})
    .pipe(tap(res => {
        const authToken = res.headers.get('x-access-token');
        // No console do browser o token deve *********************************
        //  ser exibido após login com sucesso
        console.log(authToken);
        console.log(`User ${userName} authenticated with token ${authToken}`);
    }));
  }
}
*******************************************************************************
04 Armazenamento do token - 15/11/2019 ########################################
-> criar dentro de "app/core" a pasta "token" e dentro de token o arquivo "token.service.ts"
*******************************************************************************
// app/core/auth/auth.service.ts **********************************************






import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { tap } from 'rxjs/operators';
import { TokenService } from '../token/token.service';

const API_URL = 'http://localhost:3000';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  constructor(
      private http: HttpClient,
      // Chama o TokenService *************************************************
      private tokenService: TokenService) { }

  authenticate(userName: string, password: string) {

    return this.http
    .post(
      API_URL + '/user/login',
       { userName, password },
        {observe: 'response'})
    .pipe(tap(res => {
        const authToken = res.headers.get('x-access-token');

        // Armazena o token ***************************************************
        // localStorage no navegador -> No browser ****************************
        // -> Logar com o cosole do browser aberto (F12) 
        // -> Firefox 
        // -> Aba Armazenamento/Local Storage 
        // -> Clicar no endereço listado, na tela ao lado
        //  o token deverá ser exibido 
        // Comando que funciona poŕme é antigo abaixo:
        // window.localStorage.setItem('authToken', authToken);
        this.tokenService.setToken(authToken);

        console.log(authToken);
        console.log(`User ${userName} authenticated with token ${authToken}`);
    }));
  }
}  
*******************************************************************************
// app/core/token/token.service.ts ############################################





import { Injectable } from '@angular/core';

const KEY = 'authToken';

// Armazena o token para eventual uso com *************************************
// usuários diferentes acessando areas diferentes da aplicação
// providedIn: 'root' -> Disponível para toda a aplicação *********************
@Injectable({ providedIn: 'root' })
export class TokenService {

    hasToken() {

        // BOOLEAN ABAIXO *****************************************************
        // "!!" usado para a possibilidade de o token ser nulo ****************
        return !!this.getToken();
    }

    setToken(token) {
        window.localStorage.setItem(KEY, token);
    }

    getToken() {
        return window.localStorage.getItem(KEY);
    }

    removeToken() {
        window.localStorage.removeItem(KEY);
    }
}
*******************************************************************************
06 Segurança do token - 15/11/2019 ############################################
-> Decodificação do token -> Copiar o token dentro da pasta LocalStorage do browser e colcar no site "http://calebb.net/" -> deverá mostrar os 
dados do token como usuário, como nome e email, pois o token 
usado utiliza um algorítmo simples:
*******************************************************************************
 	{
 alg: "HS256",
 typ: "JWT"
}.
{
 id: 1,
 name: "flavio",
 email: "flavio@alurapic.com.br",
 iat: 1573853096,
 exp: 1573939496
}.
[signature]
*******************************************************************************
-> Alteração do token para acesso não altorizado -> É possível descriptografar
 um token, mas para torná-lo um JWT novamente e enviá-lo ao back end de forma válida, será preciso conhecer este passphrase, a frase utilizada pelo back end para gerar o token. Ou seja, não vai dar certo tentar adulterar o token, pois qualquer alteração, por mínima que seja, obrigatoriamente alterará a sua assinatura.
*******************************************************************************




08 Cabeçalho da aplicação - ###################################################
-> Criar dentro de "core" a pasta "header" com os 
arquivos "header.component.ts" e "header.component.ts"
-> Criar dentro de "core" o arquivo "core.module.ts"

<!-- core/header/header.component.ts ###################################### -->




<header class="fixed-top">
    <nav class="navbar navbar-light bg-white">
        <a class="navbar-brand">ALURAPIC</a>
        <div>
            <i class="fa fa-user-circle"></i>
            <a>Aqui deve entrar o username</a>
        </div>
    </nav>
</header>
*******************************************************************************
<!-- index.html ########################################################### -->
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Alurapic</title>
  <base href="/">

  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">



  
  <!-- Alterar disposição dos elementos da tela para **************************
    exibir o título do cabeçalho e manter o campo para pesquisa -->
  <style>
    body{
      padding-top: 60px;
    }
  </style>

</head>
<body>
  <!-- Componente principal carregado aqui ################################ -->
  <app-root></app-root>
</body>
</html>
*******************************************************************************
// app.module.ts ##############################################################

import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppComponent } from './app.component';
import { PhotosModule } from './photos/photos.module';
import { AppRoutingModule } from './app.routing.module';
import { ErrorsModule } from './errors/errors.module';
import { HomeModule } from './home/home.module';
import { CoreModule } from './core/core.module';

@NgModule({
  declarations: [
    AppComponent,
  ],
  imports: [
    BrowserModule,
    PhotosModule,
    AppRoutingModule,
    ErrorsModule,
    HomeModule,
    // Importar para usar o cabeçalho *****************************************
    CoreModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
*******************************************************************************
// core/header/header.component.ts ############################################



import { Component } from '@angular/core';

@Component({
    selector: 'ap-header',
    templateUrl: './header.component.html'
})
export class HeaderComponent {
}
*******************************************************************************
<!-- app.component.html ################################################### -->



<!-- Adicionar o hader aqui *********************************************** -->
<ap-header></ap-header>
<router-outlet></router-outlet>
*******************************************************************************
// core/core.module.ts ########################################################

import { NgModule } from '@angular/core';
import { HeaderComponent } from './header/header.component';

@NgModule({
    declarations: [ HeaderComponent ],
    exports: [ HeaderComponent ]
})
export class CoreModule{
}

*******************************************************************************
-> Exibição do nome do usuário logado #########################################
*******************************************************************************
02 Separação de responsabilidades - 16/11/2019 ################################
-> Descriptografar token, pegar nome do usuário do payload e ******************
 plotar na tela
-> No terminal, parar a aplicação e digitar -> sudo npm install jwt-decode@2.2.0
-> No package.json a dependência "jwt-decode": "^2.2.0";
-> Dentro de "core" criar a pasta "user" e dentro de "user" criar o arquivo "user.service.ts"
-> Dentro de "user" criar o arquivo "user.ts"
*******************************************************************************




// core/user/user.service.ts ##################################################
// 1/5 ************************************************************************
// Serviço para trabalhar com o token *****************************************
import { Injectable } from '@angular/core';
import { TokenService } from '../token/token.service';
import { BehaviorSubject } from 'rxjs';
import { User } from './user';
import * as jwt_decode from 'jwt-decode';

@Injectable({ providedIn: 'root' })
export class UserService {

    // Utiliza BehaviorSubjectt<User> -> alimentado pelo arquivo user.ts ******
    // O BehaviorSubject armazena a última emissão até ************************
    //  que alguém apareça para consumi-la.
    private userSubject = new BehaviorSubject<User>(null);

    constructor(private tokenService: TokenService) {

        // Para o caso de a aplicação ser fechada e ***************************
        // reaberta para que o serviço do token continue funcionando
        this.tokenService.hasToken() && 
            this.decodeAndNotify();
     }

    setToken(token: string) {
        this.tokenService.setToken(token);
            this.decodeAndNotify();
    }

    getUser() {
        return this.userSubject.asObservable();
    }

    private decodeAndNotify(){
        const token = this.tokenService.getToken();
        // Pega o token, decodifica e carrega na var "user" *******************
        const user = jwt_decode(token) as User;
        this.userSubject.next(user);
    }
}
*******************************************************************************
// app/core/auth/auth.service.ts ##############################################
// 2/5 ************************************************************************

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { tap } from 'rxjs/operators';
import { UserService } from '../user/user.service';

const API_URL = 'http://localhost:3000';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  constructor(
      private http: HttpClient,

      // Declara userService **************************************************
      private userService: UserService) { }

  authenticate(userName: string, password: string) {

    return this.http
    .post(
      API_URL + '/user/login',
       { userName, password },
        {observe: 'response'})
    .pipe(tap(res => {
        const authToken = res.headers.get('x-access-token');

        // Declara userService ************************************************
        this.userService.setToken(authToken);
        console.log(authToken);
        console.log(`User ${userName} authenticated with token ${authToken}`);
    }));
  }
}  
*******************************************************************************
// user/user.ts ***************************************************************
// 3/5 ************************************************************************

export interface User {
    id: number;
    name: string;
    email: string
}
*******************************************************************************
// core/header/header.component.ts ############################################
// 4/5 ************************************************************************

import { Component } from '@angular/core';
import { Observable } from 'rxjs';
import { User } from '../user/user';
import { UserService } from '../user/user.service';

@Component({
    selector: 'ap-header',
    templateUrl: './header.component.html'
})
export class HeaderComponent {

    // user$ -> O "$" indica que a var guardará o *****************************
    // valor de um observable
    user$: Observable<User>;
    user: User;

    constructor(userService: UserService) {
        this.user$ = userService.getUser();
        this.user$.subscribe(user => this.user = user);
    }
}
*******************************************************************************
<!-- core/header/header.component.ts ###################################### -->
<!-- 5/5 ****************************************************************** -->



<header class="fixed-top">
    <nav class="navbar navbar-light bg-white">
        <a class="navbar-brand">ALURAPIC</a>
        <div>
            <i class="fa fa-user-circle"></i>
            
            <!-- {{ user?.name }} -> utiliza "?" pois user pode
                 não existir-->
            <a class="ml-2">{{ user?.name }}</a>
        </div>
    </nav>
</header>
*******************************************************************************
05 Async pipe - 18/11/2019 - ##################################################
-> if para exibir nome do usuário logado ou 
pedido para login se não houver login

Com o Async pipe conseguimos capturar a emissão do Observable diretamente do nosso template.

<!-- core/header/header.component.ts ###################################### -->
<!-- 1/3 ****************************************************************** -->

<!-- if para exibir nome do usuário logado ou *********************************
pedido para login se não houver login -->

<header class="fixed-top">
    <nav class="navbar navbar-light bg-white">
        <a class="navbar-brand">ALURAPIC</a>


        <!-- ngif com pipe async aqui ************************************* -->
        <div *ngIf="(user$ | async) as user; else login">
                <i class="fa fa-user-circle"></i>
                <a class="ml-2">{{ user.name }}</a>
        </div>
        <!-- Exibe solicitação de login se "user" acima no ********************
             ngif estiver vazio-->
        <ng-template #login>
            <span class="navbar-text">
              <a>Please login!</a>
            </span>
        </ng-template>
    </nav>
</header>
*******************************************************************************
// core/core.module.ts ########################################################
// 2/3 ************************************************************************

import { NgModule } from '@angular/core';
import { HeaderComponent } from './header/header.component';
import { CommonModule } from '@angular/common';

@NgModule({
    declarations: [ HeaderComponent ],
    exports: [ HeaderComponent ],

    

    // Importar CommonModule para reconhecer o ********************************
    // ngif em "header.component.ts" 
    imports: [ CommonModule ]
})
export class CoreModule{
}
*******************************************************************************
// core/header/header.component.ts ############################################
// 3/3 ************************************************************************

import { Component } from '@angular/core';
import { Observable } from 'rxjs';
import { User } from '../user/user';
import { UserService } from '../user/user.service';

@Component({
    selector: 'ap-header',
    templateUrl: './header.component.html'
})
export class HeaderComponent {

    user$: Observable<User>;

    // Comentar/apagar ao começar a usar async ********************************
    // pype em header.component.ts
    // user: User;

    constructor(userService: UserService) {
        this.user$ = userService.getUser();
        
        // Comentar/apagar ao começar a usar async ****************************
        // pype em header.component.ts
        // this.user$.subscribe(user => this.user = user);
    }
}
*******************************************************************************
07 Implementação do logout - 19/11/2019 #######################################




// core/user/user.service.ts ##################################################
// 1/3 ************************************************************************

import { Injectable } from '@angular/core';
import { TokenService } from '../token/token.service';
import { BehaviorSubject } from 'rxjs';
import { User } from './user';
import * as jwt_decode from 'jwt-decode';

@Injectable({ providedIn: 'root' })
export class UserService {

    private userSubject = new BehaviorSubject<User>(null);

    constructor(private tokenService: TokenService) {

        this.tokenService.hasToken() && 
            this.decodeAndNotify();
     }

    setToken(token: string) {
        this.tokenService.setToken(token);
            this.decodeAndNotify();
    }

    getUser() {
        return this.userSubject.asObservable();
    }

    private decodeAndNotify(){
        const token = this.tokenService.getToken();
        const user = jwt_decode(token) as User;
        this.userSubject.next(user);
    }

    

    // Criação do método logout ***********************************************
    logout(){
        this.tokenService.removeToken();
        // next(null) -> Para apagar o nome do usuário logado *****************
        this.userSubject.next(null);
    }
}
*******************************************************************************
// core/header/header.component.ts ############################################
// 2/3 ************************************************************************

import { Component } from '@angular/core';
import { Observable } from 'rxjs';
import { User } from '../user/user';
import { UserService } from '../user/user.service';
import { Router } from '@angular/router';

@Component({
    selector: 'ap-header',
    templateUrl: './header.component.html'
})
export class HeaderComponent {

    user$: Observable<User>;

    // Declara "userService" e "Router" no contrutor **************************
    constructor(private userService: UserService,
                private router: Router) {
        this.user$ = userService.getUser();
    }
    

    // Criação do método logout ***********************************************
    logout(){
        this.userService.logout();
        // Navega para a rota de login ****************************************
        this.router.navigate(['']);
    }
}
*******************************************************************************
<!-- core/header/header.component.ts ###################################### -->
<!-- 3/3 ****************************************************************** -->

<header class="fixed-top">
    <nav class="navbar navbar-light bg-white">
        <a class="navbar-brand">ALURAPIC</a>
        <div *ngIf="(user$ | async) as user; else login">
                <i class="mr-1 fa fa-user-circle"></i>
                <a class="mr-1">{{ user.name }}</a>


                
                <!-- Insere o link para logout **************************** -->
                <!-- Data Binding do click do mouse para o ********************
                     método logout -->
                <a (click)="logout()">(Logout)</a>
        </div>
        <ng-template #login>
            <span class="navbar-text">
              <a>Please login!</a>
            </span>
        </ng-template>
    </nav>
</header>
*******************************************************************************
08 Guarda de rotas - 20/11/2019 ###############################################
-> Não permitir inserção de rotas no campo endereço do ************************
browser fora da navegação normal -> Rout Guards
-> Criar dentro de "core/auth" o arquivo "auth.guard.ts"

// app/core/auth.guard.ts #####################################################
// 1/3 ************************************************************************



// O guarda de rotas serve para darmos consistência para nossa ****************
// aplicação, liberando acesso apenas para as rotas que fazem
//  sentido para nosso usuário.
// Classe para guarda de rotas ************************************************
// UserService -> para identificar se o usuário tem ***************************
// direitos de acesso a rota
import { Injectable } from '@angular/core';
import { UserService } from '../user/user.service';
import { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';
import { Observable } from 'rxjs';

@Injectable({ providedIn: 'root' })
export class AuthGuard implements CanActivate {
    
    constructor(private userService: UserService,
                private router: Router) {}
    
    // Se retornar "true" o usuário tem acesso a rota *************************
    canActivate(
        route: ActivatedRouteSnapshot,
        state: RouterStateSnapshot): boolean | Observable<boolean> | Promise<boolean> {
            console.log('Ativou guarda de rota');

            if(this.userService.isLogged()){
                // Se reconhecer o usuário logado navega para *****************
                //  a rota pretendida
                this.router.navigate(['user', this.userService.getUserName()])
                return false;
            }
            return true;
    }
}
*******************************************************************************
// core/user/user.service.ts ##################################################
// 2/3 ************************************************************************

import { Injectable } from '@angular/core';
import { TokenService } from '../token/token.service';
import { BehaviorSubject } from 'rxjs';
import { User } from './user';
import * as jwt_decode from 'jwt-decode';

@Injectable({ providedIn: 'root' })
export class UserService {

    private userSubject = new BehaviorSubject<User>(null);
    // Declara userName para uso no método getUserName ************************
    private userName: string;

    constructor(private tokenService: TokenService) {

        this.tokenService.hasToken() && 
            this.decodeAndNotify();
     }

    setToken(token: string) {
        this.tokenService.setToken(token);
            this.decodeAndNotify();
    }

    getUser() {
        return this.userSubject.asObservable();
    }

    private decodeAndNotify(){
        const token = this.tokenService.getToken();
        const user = jwt_decode(token) as User;
        // Captura o nome do usuário ao decodificar o token *******************
        this.userName = user.name;
        this.userSubject.next(user);
    }

    logout(){
        this.tokenService.removeToken();
        this.userSubject.next(null);
    }

    // Informar UserService se o usuário já está logado ***********************
    isLogged() {
        return this.tokenService.hasToken();
    }

    // Método para capturar o id do usuário logado ****************************
    getUserName() {
        return this.userName;
    }
}
*******************************************************************************
// app.routing.module.ts ######################################################
// 3/3 ************************************************************************

import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';

import { PhotoListComponent } from './photos/photo-list/photo-list.component';
import { NotFoundComponent } from './errors/not-found/not-found.component';
import { PhotoListResolver } from './photos/photo-list/photos/photo-listresolver';
import { SignInComponent } from './home/signin/signin.component';
import { AuthGuard } from './core/auth/auth.guard';

const routes: Routes = [

        {path: '',
         component: SignInComponent,

        //  Adiciona o guarda de rotas ****************************************
        //  IMPORTANTE -> Sempre que adicionar o AuthGuard ********************
        //  reiniciar a aplicação -> ao reiniciar a aplicação, no *************
        //  console do browser deve aparecer a msg informando que 
        // o guarda de rotas foi ativado
         canActivate: [ AuthGuard ]
        },

        {path: 'user/:userName', 
            component: PhotoListComponent,
            resolve:{
                photos: PhotoListResolver
            }
        },

        {path: 'p/add', 
        component: PhotoListComponent
        },
        
        {path: '**', 
        component: NotFoundComponent
        }
];

@NgModule({
    imports: [RouterModule.forRoot(routes)],
    exports: [RouterModule]
})

export class AppRoutingModule{}
*******************************************************************************
10 A diretiva routerLink - 20/11/2019 #########################################

<!-- core/header/header.component.ts ###################################### -->
<!-- 1/2 ****************************************************************** -->
-> Direciona para a página de login ao clicar no link "Please, login! SEM  recarregar toda a aplicação




<header class="fixed-top">
    <nav class="navbar navbar-light bg-white">
        <a class="navbar-brand">ALURAPIC</a>
        <div *ngIf="(user$ | async) as user; else login">
                <i class="mr-1 fa fa-user-circle"></i>
                <a class="mr-1">{{ user.name }}</a>
         <a (click)="logout()">(Logout)</a>
        </div>
        <ng-template #login>
            <span class="navbar-text">

              <!-- Direciona para a página de login ao ************************ 
                clicar no link "Please, login! SEM 
                recarregar toda a aplicação"-->
              <a [routerLink]="['']">Please, login!</a>
            </span>
        </ng-template>
    </nav>
</header>
*******************************************************************************
// core/core.module.ts ########################################################
// 2/2 ************************************************************************

import { NgModule } from '@angular/core';
import { HeaderComponent } from './header/header.component';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';

@NgModule({
    declarations: [ HeaderComponent ],
    exports: [ HeaderComponent ],

    imports: [ CommonModule, 
                // Importar "RouterModule" para trabalhar com o ***************
                // direcionamento da rota ao clicar em "Please, login!"
                RouterModule ]
})
export class CoreModule{
}
*******************************************************************************
02 O componente de registro - 20/11/2019 ######################################
Registro de novos usuários
-> Criar em "home" a subpasta "signup" com os arquivos "signup.component.ts" e "signup.component.html"
-> Criar dentro de "shared" a pasta "validators" e dentro desta pasta o arquivo "lower.case.validator.ts"




// home/signup/signup.component.ts ############################################
// 1/6 ************************************************************************

import { Component } from '@angular/core';
import { FormGroup, FormBuilder, Validators } from '@angular/forms';
import { lowerCaseValidator } from 'src/app/shared/validators/lower.case.validator';

@Component({
    templateUrl: './signup.component.html'
})
export class SignUpComponent { 

    signupForm: FormGroup;

    constructor(private formBuilder: FormBuilder) {}

    // Cria validações dos campos do formulário de ****************************
    //  cadastro de novo usuário
    // Seta validações a serem feitas nos *************************************
    // campos de "signup.component.html"
    ngOnInit(): void {
        this.signupForm = this.formBuilder.group({
            email: ['',
                [
                    // Define como campo obrigatório **************************
                    Validators.required,
                    // Valida máscara de email ********************************
                    Validators.email
                ]
            ],
            fullName: ['',
                [
                    Validators.required,
                    // Define tamanho mínimo **********************************
                    Validators.minLength(2),
                    // Define tamanho máximo **********************************
                    Validators.maxLength(40)
                ]
            ],
            userName: ['',
                [
                    Validators.required,
                    // Define caracteres permitidos ***************************
                    // Sempre com caracteres minúsculos e NÃO *****************
                    //  pode começar com números - Expressão Regular
                    Validators.pattern(/^[a-z0-9_\-]+$/),

                    // Executa o mesmo comando da linha acima a partir ********
                    //  de um método criado em
                    //  shared/validators/lower.case.validator.ts
                    lowerCaseValidator,

                    Validators.minLength(2),
                    Validators.maxLength(30)
                ]
            ],
            password: ['',
                [
                    Validators.required,
                    Validators.minLength(8),
                    Validators.maxLength(14)
                ]
            ]
        });
    }
}
*******************************************************************************
<!-- home/signup/signup.component.html #################################### -->
<!-- 2/6 ****************************************************************** -->

<h4 class="text-center"> Register to embrace a new world!</h4>

<!-- Combina validações de campos declaradas em *******************************
     "signup.component.ts" -->
<form [formGroup]="signupForm" class="form mt-4">
        <div class="form-group">
            <input formControlName="email" class="form-control" placeholder="email" autofocus>
            <ap-vmessage
                *ngIf="signupForm.get('email').errors?.required"
                text="Email is required!">
            </ap-vmessage>
            <ap-vmessage
                *ngIf="signupForm.get('email').errors?.email"
                text="Invalid e-mail">
            </ap-vmessage>
        </div>
    
        <div class="form-group">
            <input formControlName="fullName" class="form-control" placeholder="full name">
            <ap-vmessage
                *ngIf="signupForm.get('fullName').errors?.required"
                text="Full name is required!">
            </ap-vmessage>
            <ap-vmessage
                *ngIf="signupForm.get('fullName').errors?.minlength"
                text="Minimum length is 2">
            </ap-vmessage>
            <ap-vmessage
                *ngIf="signupForm.get('fullName').errors?.maxlength"
                text="Maximum length is 40">
            </ap-vmessage>
        </div>
    
        <div class="form-group">
            <input formControlName="userName" class="form-control" placeholder="user name">
            <ap-vmessage
                *ngIf="signupForm.get('userName').errors?.required"
                text="Username is required!">
            </ap-vmessage>
            <ap-vmessage
                *ngIf="signupForm.get('userName').errors?.minlength"
                text="Minimum length is 2">
            </ap-vmessage>
            <ap-vmessage
                *ngIf="signupForm.get('userName').errors?.maxlength"
                text="Maximum length is 30">
            </ap-vmessage>
            
            <!-- errors?.lowercase" -> o termo lowercase corresponde **********
                 a "return { lowerCase: true }" em "lower.case.validator.ts" -->
            <ap-vmessage
                *ngIf="signupForm.get('userName').errors?.lowerCase"
                text="Must be lowercase">
            </ap-vmessage>

            <!-- Este bloco comentado abaixo também funcionaria, foi **********
                substituído pelo bloco acima que recebeu o 
                método lowerCaseValidator criado -->
            <!-- <ap-vmessage
                *ngIf="signupForm.get('userName').errors?.pattern"
                text="Must be lowercase">
            </ap-vmessage> -->
        </div>
    
        <div class="form-group">
            <input formControlName="password" type="password" class="form-control" placeholder="password">
            <ap-vmessage
                *ngIf="signupForm.get('password').errors?.required"
                text="Password is required!">
            </ap-vmessage>
            <ap-vmessage
                *ngIf="signupForm.get('password').errors?.minlength"
                text="Minimum length is 8">
            </ap-vmessage>
            <ap-vmessage
                *ngIf="signupForm.get('password').errors?.maxlength"
                text="Maximum length is 14">
            </ap-vmessage>
        </div>
    
        <button class="btn btn-primary btn-block">Register</button>
    
        <p>Already a user? <a [routerLink]="['']">Sign In!</a></p>
    </form>
*******************************************************************************
<!-- core/header/header.component.ts ###################################### -->
<!-- 3/6 ****************************************************************** -->

<header class="fixed-top">
    <nav class="navbar navbar-light bg-white">
        <a class="navbar-brand">ALURAPIC</a>
        <div *ngIf="(user$ | async) as user; else login">
                <i class="mr-1 fa fa-user-circle"></i>
                <a class="mr-1">{{ user.name }}</a>
         <a (click)="logout()">(Logout)</a>
        </div>
        <ng-template #login>
            <span class="navbar-text">

              <!-- Direciona para a página de login ao ************************ 
                clicar no link "Please, login! SEM 
                recarregar toda a aplicação"-->
              <a [routerLink]="['']">Please, login!</a>
            </span>
        </ng-template>
    </nav>
</header>
*******************************************************************************
// core/user/user.service.ts ##################################################
// 4/6 ************************************************************************

import { Injectable } from '@angular/core';
import { TokenService } from '../token/token.service';
import { BehaviorSubject } from 'rxjs';
import { User } from './user';
import * as jwt_decode from 'jwt-decode';

@Injectable({ providedIn: 'root' })
export class UserService {

    private userSubject = new BehaviorSubject<User>(null);
    // Declara userName para uso no método getUserName ************************
    private userName: string;

    constructor(private tokenService: TokenService) {

        this.tokenService.hasToken() && 
            this.decodeAndNotify();
     }

    setToken(token: string) {
        this.tokenService.setToken(token);
            this.decodeAndNotify();
    }

    getUser() {
        return this.userSubject.asObservable();
    }

    private decodeAndNotify(){
        const token = this.tokenService.getToken();
        const user = jwt_decode(token) as User;
        // Captura o nome do usuário ao decodificar o token *******************
        this.userName = user.name;
        this.userSubject.next(user);
    }

    logout(){
        this.tokenService.removeToken();
        this.userSubject.next(null);
    }

    // Informar UserService se o usuário já está logado ***********************
    isLogged() {
        return this.tokenService.hasToken();
    }

    // Método para capturar o id do usuário logado ****************************
    getUserName() {
        return this.userName;
    }
}
*******************************************************************************
// core/header/header.component.ts ############################################
// 5/6 ************************************************************************

import { Component } from '@angular/core';
import { Observable } from 'rxjs';
import { User } from '../user/user';
import { UserService } from '../user/user.service';
import { Router } from '@angular/router';

@Component({
    selector: 'ap-header',
    templateUrl: './header.component.html'
})
export class HeaderComponent {

    user$: Observable<User>;

    // Declara "userService" e "Router" no contrutor **************************
    constructor(private userService: UserService,
                private router: Router) {
        this.user$ = userService.getUser();
    }
    

    // Criação do método logout ***********************************************
    logout(){
        this.userService.logout();
        // Navega para a rota de login ****************************************
        this.router.navigate(['']);
    }
}
*******************************************************************************
// shared/validators/lower.case.validator.ts ##################################
// 6/6 ************************************************************************

import { AbstractControl } from '@angular/forms';

export function lowerCaseValidator(control: AbstractControl) {

    // control.value.trim() -> Se o campo não estiver em branco ***************
    // !/^[a-z0-9_\-]+$/.test(control.value) -> Se não atender à **************
    // expressão de validação
    if(control.value.trim() && !/^[a-z0-9_\-]+$/.test(control.value)) {
        return { lowerCase: true }
    }
    // Se não houver erro de validação retorna null ***************************
    return null;
}
*******************************************************************************
06 Validador assíncrono - 20191121001 #########################################
Verifica se usuário declarado no cadastro já existe ***************************
-> Criar dentro de signup os arquivos signup.service.ts e user-not-taken.validator.service.ts
*******************************************************************************
// signup/signup.service.ts ###################################################
// 1/4 ************************************************************************





// Serviço para verificar se já existe usuário registrado *********************
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';

const API_URL = "http://localhost:3000";

@Injectable({ providedIn: 'root' })
export class SignUpService {

    constructor(private http: HttpClient) {}

    checkUserNameTaken(userName: string) {

        return this.http.get(API_URL + '/user/exists/' + userName);
    }
}
*******************************************************************************
// signup/user-not-taken.validator.service.ts #################################
// 2/4 ************************************************************************

import { Injectable } from '@angular/core';
import { SignUpService } from './signup.service';
import { AbstractControl } from '@angular/forms';
import { debounceTime, switchMap, map, first } from 'rxjs/operators';

@Injectable({ providedIn: 'root' })
export class UserNotTakenValidatorService {

    constructor(private signUpService: SignUpService) {}

    checkUserNameTaken() {

        return (control: AbstractControl) => {
            return control
            .valueChanges
            // Espera o usuário parar de digitar para verificar se ************
            //  o nome inserido já existe
            .pipe(debounceTime(500)) 
            .pipe(switchMap(userName => 
                this.signUpService.checkUserNameTaken(userName)
            ))
                .pipe(map(isTaken => isTaken ? { userNameTaken: true} : null))
                .pipe(first());
        }
    }
}
*******************************************************************************
<!-- home/signup/signup.component.html #################################### -->
<!-- 3/4 ****************************************************************** -->

<h4 class="text-center"> Register to embrace a new world!</h4>

<form [formGroup]="signupForm" class="form mt-4">
        <div class="form-group">
            <input formControlName="email" class="form-control" placeholder="email" autofocus>
            <ap-vmessage
                *ngIf="signupForm.get('email').errors?.required"
                text="Email is required!">
            </ap-vmessage>
            <ap-vmessage
                *ngIf="signupForm.get('email').errors?.email"
                text="Invalid e-mail">
            </ap-vmessage>
        </div>
    
        <div class="form-group">
            <input formControlName="fullName" class="form-control" placeholder="full name">
            <ap-vmessage
                *ngIf="signupForm.get('fullName').errors?.required"
                text="Full name is required!">
            </ap-vmessage>
            <ap-vmessage
                *ngIf="signupForm.get('fullName').errors?.minlength"
                text="Minimum length is 2">
            </ap-vmessage>
            <ap-vmessage
                *ngIf="signupForm.get('fullName').errors?.maxlength"
                text="Maximum length is 40">
            </ap-vmessage>
        </div>
    
        <div class="form-group">
            <input formControlName="userName" class="form-control" placeholder="user name">
            <ap-vmessage
                *ngIf="signupForm.get('userName').errors?.required"
                text="Username is required!">
            </ap-vmessage>
            <ap-vmessage
                *ngIf="signupForm.get('userName').errors?.minlength"
                text="Minimum length is 2">
            </ap-vmessage>
            <ap-vmessage
                *ngIf="signupForm.get('userName').errors?.maxlength"
                text="Maximum length is 30">
            </ap-vmessage>
            <ap-vmessage
                *ngIf="signupForm.get('userName').errors?.lowerCase"
                text="Must be lowercase">
            </ap-vmessage>


            <!-- Validação para usuário já existente ********************** -->
            <!-- errors?.userNameTaken -> combina com *************************
                errors?.userNameTaken em user-not-taken.validator.service.ts  -->
            <ap-vmessage
                text="Username already taken"
                *ngIf="signupForm.get('userName').errors?.userNameTaken">
            </ap-vmessage>
            <!-- Exibe msg informando que o usuário sendo *********************
                registrado ainda não existe no sistema -->
            <small *ngIf="signupForm.get('userName').valid" class="text-success">User available</small>

        </div>
    
        <div class="form-group">
            <input formControlName="password" type="password" class="form-control" placeholder="password">
            <ap-vmessage
                *ngIf="signupForm.get('password').errors?.required"
                text="Password is required!">
            </ap-vmessage>
            <ap-vmessage
                *ngIf="signupForm.get('password').errors?.minlength"
                text="Minimum length is 8">
            </ap-vmessage>
            <ap-vmessage
                *ngIf="signupForm.get('password').errors?.maxlength"
                text="Maximum length is 14">
            </ap-vmessage>
        </div>
    


        <!-- [disabled]="signupForm.invalid" -> mantém o botão Registrar ******
            desabilitado enquanto houver campo com 
            erro de preenchimento apontado -->
        <button [disabled]="signupForm.invalid || signupForm.pending" class="btn btn-primary btn-block">Register</button>
    
        <p>Already a user? <a [routerLink]="['']">Sign In!</a></p>
    </form>
*******************************************************************************
// home/signup/signup.component.ts ############################################
// 4/4 ************************************************************************

import { Component } from '@angular/core';
import { FormGroup, FormBuilder, Validators } from '@angular/forms';
import { lowerCaseValidator } from 'src/app/shared/validators/lower.case.validator';
import { UserNotTakenValidatorService } from './user-not-taken.validator.service';

@Component({
    templateUrl: './signup.component.html'
})
export class SignUpComponent { 

    signupForm: FormGroup;

    constructor(private formBuilder: FormBuilder,
                // Importa o UserNotTakenValidatorService *********************
                private userNotTakenValidatorService: UserNotTakenValidatorService) {}

    ngOnInit(): void {

        this.signupForm = this.formBuilder.group({
    
            email: ['',
                [
                    Validators.required,
                    Validators.email
                ]
            ],
    
            fullName: ['',
                [
                    Validators.required,
                    Validators.minLength(2),
                    Validators.maxLength(40)
                ]
            ],
    
            userName: ['',
                [
                    Validators.required,
                    lowerCaseValidator,
                    Validators.minLength(2),
                    Validators.maxLength(30)
                ],
                // Declara o uso do método checkUserNameTaken *****************
                this.userNotTakenValidatorService.checkUserNameTaken()
            ],
            password: ['',
                [
                    Validators.required,
                    Validators.minLength(8),
                    Validators.maxLength(14)
                ]
            ]
        });
    }
}
*******************************************************************************
 08 Submissão dos dados - 20191122001 #########################################





-> Dentro de "signup" criar o arquivo "new-user.ts" 

// home/signup/signup.component.ts ############################################
// 1/4 ************************************************************************

import { Component } from '@angular/core';
import { FormGroup, FormBuilder, Validators } from '@angular/forms';
import { lowerCaseValidator } from 'src/app/shared/validators/lower.case.validator';
import { UserNotTakenValidatorService } from './user-not-taken.validator.service';
import { NewUser } from './new-user';
import { SignUpService } from './signup.service';
import { Router } from '@angular/router';

@Component({
    templateUrl: './signup.component.html'
})
export class SignUpComponent { 

    signupForm: FormGroup;

    constructor(private formBuilder: FormBuilder,
                private userNotTakenValidatorService: UserNotTakenValidatorService,

                // Injeta "signUpService" e "router" **************************
                private signUpService: SignUpService,
                private router: Router) {}

    ngOnInit(): void {

        this.signupForm = this.formBuilder.group({
    
            email: ['',
                [
                    Validators.required,
                    Validators.email
                ]
            ],
    
            fullName: ['',
                [
                    Validators.required,
                    Validators.minLength(2),
                    Validators.maxLength(40)
                ]
            ],
    
            userName: ['',
                [
                    Validators.required,
                    lowerCaseValidator,
                    Validators.minLength(2),
                    Validators.maxLength(30)
                ],
                this.userNotTakenValidatorService.checkUserNameTaken()
            ],
            
            password: ['',
                [
                    Validators.required,
                    Validators.minLength(8),
                    Validators.maxLength(14)
                ]
            ]
        });
    }
    // Declarar o método signup() *********************************************
    // getRawValue() -> Retorna todos os valores ******************************
    // inseridos no formulário
    signup() {
        const newUser = this.signupForm.getRawValue() as NewUser;
        this.signUpService
        .signup(newUser)
        .subscribe(
            // Vai para a tela de login após cadastrar o **********************
            // novo usuário com sucesso
            ()=> this.router.navigate(['']),
            err => console.log(err)
            );
    }
}
*******************************************************************************
<!-- home/signup/signup.component.html #################################### -->
<!-- 2/4 ****************************************************************** -->

<h4 class="text-center"> Register to embrace a new world!</h4>

<!-- Chamar o método signup() no evento submit **************************** -->
<form [formGroup]="signupForm" class="form mt-4" (submit)="signup()">

        <div class="form-group">
            <input formControlName="email" class="form-control" placeholder="email" autofocus>
            <ap-vmessage
                *ngIf="signupForm.get('email').errors?.required"
                text="Email is required!">
            </ap-vmessage>
            <ap-vmessage
                *ngIf="signupForm.get('email').errors?.email"
                text="Invalid e-mail">
            </ap-vmessage>
        </div>
    
        <div class="form-group">
            <input formControlName="fullName" class="form-control" placeholder="full name">
            <ap-vmessage
                *ngIf="signupForm.get('fullName').errors?.required"
                text="Full name is required!">
            </ap-vmessage>
            <ap-vmessage
                *ngIf="signupForm.get('fullName').errors?.minlength"
                text="Minimum length is 2">
            </ap-vmessage>
            <ap-vmessage
                *ngIf="signupForm.get('fullName').errors?.maxlength"
                text="Maximum length is 40">
            </ap-vmessage>
        </div>
    
        <div class="form-group">
            <input formControlName="userName" class="form-control" placeholder="user name">
            <ap-vmessage
                *ngIf="signupForm.get('userName').errors?.required"
                text="Username is required!">
            </ap-vmessage>
            <ap-vmessage
                *ngIf="signupForm.get('userName').errors?.minlength"
                text="Minimum length is 2">
            </ap-vmessage>
            <ap-vmessage
                *ngIf="signupForm.get('userName').errors?.maxlength"
                text="Maximum length is 30">
            </ap-vmessage>
            <ap-vmessage
                *ngIf="signupForm.get('userName').errors?.lowerCase"
                text="Must be lowercase">
            </ap-vmessage>

            <ap-vmessage
                text="Username already taken"
                *ngIf="signupForm.get('userName').errors?.userNameTaken">
            </ap-vmessage>
            <small *ngIf="signupForm.get('userName').valid" class="text-success">User available</small>

        </div>
    
        <div class="form-group">
            <input formControlName="password" type="password" class="form-control" placeholder="password">
            <ap-vmessage
                *ngIf="signupForm.get('password').errors?.required"
                text="Password is required!">
            </ap-vmessage>
            <ap-vmessage
                *ngIf="signupForm.get('password').errors?.minlength"
                text="Minimum length is 8">
            </ap-vmessage>
            <ap-vmessage
                *ngIf="signupForm.get('password').errors?.maxlength"
                text="Maximum length is 14">
            </ap-vmessage>
        </div>

        <button [disabled]="signupForm.invalid || signupForm.pending" class="btn btn-primary btn-block">Register</button>
    
        <p>Already a user? <a [routerLink]="['']">Sign In!</a></p>
    </form>
*******************************************************************************
// signup/new-user.ts #########################################################
// 3/4 ************************************************************************ 

export interface NewUser {
    userName: string,
    email: string,
    fullName: string,
    password: string
}
*******************************************************************************
// signup/signup.service.ts ###################################################
// 4/4 ************************************************************************

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { NewUser } from './new-user';

const API_URL = "http://localhost:3000";

@Injectable({ providedIn: 'root' })
export class SignUpService {

    constructor(private http: HttpClient) {}

    checkUserNameTaken(userName: string) {

        return this.http.get(API_URL + '/user/exists/' + userName);
    }

    // Declara serviço para capturar dados do novo usuário ********************
    signup(newUser: NewUser) {
        return this.http.post(API_URL + '/user/signup', newUser);
    }
}
*******************************************************************************
02 Rotas filhas - 23/11/2019 ##################################################





-> Criação de componente que exibirá barra do lado ****************************
esquerdo da tela comum a todas as páginas da aplicação e 
executa o direcionamento das rotas -> routerOutlet
-> Baixar, da página do curso, a imagem "home.jpg", criar a pasta "img" dentro da pasta "assets" e colocar dentro desta pasta "src/assets"
-> Criar na pasta "home" os arquivos "home.component.ts" e "home.component.html"

<!-- home/home.component.html ********************************************* -->
<!-- 1/8 ****************************************************************** -->

<!-- <div class="container"> -> cria uma margem em volta da imagel ******** -->
<div class="container">
    <div class="row">

        
        <!-- Cria a coluna do lado esquerdo da ********************************
            tela comum a todas as telas da aplicação -->
        <div class="col-md-6 mb-2">
            <img class="img-fluid d-none d-sm-block"
                src="/assets/img/home.jpg" alt="Welcome">
        </div>

        
        <!-- Insere o routerOutlet na parte que sobrar da tela ************ -->
        <!-- As rotas filhas serão exibidas aqui ************************** -->
        <div class="col-md-6">
            <router-outlet></router-outlet>
        </div>
    </div>
</div>
*******************************************************************************
// /home/home.component.html **************************************************
// 2/8 ************************************************************************

import { Component } from '@angular/core';

@Component({
    templateUrl: './home.component.html'
})
export class HomeComponent { }
*******************************************************************************
// app.routing.module.ts ######################################################
// 3/8 ************************************************************************

import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';

import { PhotoListComponent } from './photos/photo-list/photo-list.component';
import { NotFoundComponent } from './errors/not-found/not-found.component';
import { PhotoListResolver } from './photos/photo-list/photos/photo-listresolver';
import { SignInComponent } from './home/signin/signin.component';
import { AuthGuard } from './core/auth/auth.guard';
import { SignUpComponent } from './home/signup/signup.component';
import { HomeComponent } from './home/home.component';

const routes: Routes = [

    // Cria a rota principal e as rotas filhas ********************************
    {path: '',
    component: HomeComponent,
    canActivate: [ AuthGuard ],
    children: [

            {path: '',
            component: SignInComponent,
        },

        {path: 'signup',
        component: SignUpComponent,
        },

    ]
    },

        {path: 'user/:userName', 
            component: PhotoListComponent,
            resolve:{
                photos: PhotoListResolver
            }
        },

        {path: 'p/add', 
        component: PhotoListComponent
        },

        {path: '**', 
        component: NotFoundComponent
        }
];

@NgModule({
    imports: [RouterModule.forRoot(routes)],
    exports: [RouterModule]
})

export class AppRoutingModule{}
*******************************************************************************
// app/home/home.module.ts ****************************************************
// 4/8 ************************************************************************ 

import { NgModule } from '@angular/core';
import { SignInComponent } from './signin/signin.component';

import { ReactiveFormsModule, FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { VMessageModule } from '../shared/vmessage/vmessage.module';
import { RouterModule } from '@angular/router';
import { SignUpComponent } from './signup/signup.component';
import { HomeComponent } from './home.component';

@NgModule({
    declarations: [ SignInComponent,
                    SignUpComponent,
                    // Importar "HomeComponent" ******************************* 
                    HomeComponent 
                ],
    imports: [ ReactiveFormsModule,
                CommonModule,
                VMessageModule,
                RouterModule,
                FormsModule
            ]
})
export class HomeModule { }

// ERRO -> "Error: Unexpected directive 'HomeComponent' imported by ***********
// the module 'HomeModule'. Please add a @NgModule annotation."
// SOLUÇÃO -> O import de "HomeComponent" esta na parte de "imports" porém o
//  correto é ser importado em "declarations"
*******************************************************************************
<!-- app/home/signin/signin.component.html ******************************** -->
<!-- 5/8 ****************************************************************** -->

<h4 class="text-center">Login</h4>

<form [formGroup]="loginForm" class="form mt-4" (submit)="login()">
    <div class="form-group">
        <input #userNameInput 
            formControlName="userName"
            class="form-control" 
            placeholder="user name" 
            autofocus>  
        <ap-vmessage 
            *ngIf="loginForm.get('userName').errors?.required"
            text="User is required !">
        </ap-vmessage>    
    </div>
    <div class="form-group">
        <input
            formControlName="password"
            type="password" 
            class="form-control" 
            placeholder="password"> 
        <ap-vmessage 
            *ngIf="loginForm.get('password').errors?.required"
            text="Password is required!">
        </ap-vmessage>        
    </div>
    <button 
        [disabled]="loginForm.invalid"
        type="submit" 
        class="btn btn-primary btn-block">
        login
    </button>
</form>

<!-- Insere [routerLink] para direcionar para *********************************
     a pagina de registro de usuário -->
<p>Not a user? <a [routerLink]="['signup']">Register now</a></p>
*******************************************************************************
// home/signup/signup.component.ts ############################################
// 6/8 ************************************************************************




import { Component, ViewChild, ElementRef } from '@angular/core';
import { FormGroup, FormBuilder, Validators } from '@angular/forms';
import { lowerCaseValidator } from 'src/app/shared/validators/lower.case.validator';
import { UserNotTakenValidatorService } from './user-not-taken.validator.service';
import { NewUser } from './new-user';
import { SignUpService } from './signup.service';
import { Router } from '@angular/router';
import { PlatformDetectorService } from 'src/app/core/platform-detector/platform-detector.service';

@Component({
    templateUrl: './signup.component.html'
})
export class SignUpComponent { 

    signupForm: FormGroup;
    // "emailInput" combina com "#inputEmail" declarado em ********************
    //  "signup.component.html"
    @ViewChild('emailInput') emailInput: ElementRef<HTMLInputElement>;
    
    constructor(private formBuilder: FormBuilder,
                private userNotTakenValidatorService: UserNotTakenValidatorService,
                private signUpService: SignUpService,
                private router: Router,
                // platformDetectorService -> Para identificar se *************
                // aplicação carregada em browser e dar o
                //  foco no campo pretendido
                private platformDetectorService: PlatformDetectorService) {}

    ngOnInit(): void {

        this.signupForm = this.formBuilder.group({
    
            email: ['',
                [
                    Validators.required,
                    Validators.email
                ]
            ],
    
            fullName: ['',
                [
                    Validators.required,
                    Validators.minLength(2),
                    Validators.maxLength(40)
                ]
            ],
    
            userName: ['',
                [
                    Validators.required,
                    lowerCaseValidator,
                    Validators.minLength(2),
                    Validators.maxLength(30)
                ],
                this.userNotTakenValidatorService.checkUserNameTaken()
            ],
            
            password: ['',
                [
                    Validators.required,
                    Validators.minLength(8),
                    Validators.maxLength(14)
                ]
            ]
        });

        // Dá o foco na inicialização da tela *********************************
        this.platformDetectorService.isPlatformBrowser() &&
        this.emailInput.nativeElement.focus();
    }
   
    signup() {
        const newUser = this.signupForm.getRawValue() as NewUser;
        this.signUpService
        .signup(newUser)
        .subscribe(
            ()=> this.router.navigate(['']),
            err => console.log(err)
            );
    }
}
*******************************************************************************
<!-- home/signup/signup.component.html #################################### -->
<!-- 7/8 ****************************************************************** -->

<h4 class="text-center"> Register to embrace a new world!</h4>

<form [formGroup]="signupForm" class="form mt-4" (submit)="signup()">

        <div class="form-group">
            <!-- #emailInput -> para dar o foco na ****************************
                 inicialização da tela -->
            <input #emailInput formControlName="email" class="form-control" placeholder="email" autofocus>
            <ap-vmessage
                *ngIf="signupForm.get('email').errors?.required"
                text="Email is required!">
            </ap-vmessage>
            <ap-vmessage
                *ngIf="signupForm.get('email').errors?.email"
                text="Invalid e-mail">
            </ap-vmessage>
        </div>
    
        <div class="form-group">
            <input formControlName="fullName" class="form-control" placeholder="full name">
            <ap-vmessage
                *ngIf="signupForm.get('fullName').errors?.required"
                text="Full name is required!">
            </ap-vmessage>
            <ap-vmessage
                *ngIf="signupForm.get('fullName').errors?.minlength"
                text="Minimum length is 2">
            </ap-vmessage>
            <ap-vmessage
                *ngIf="signupForm.get('fullName').errors?.maxlength"
                text="Maximum length is 40">
            </ap-vmessage>
        </div>
    
        <div class="form-group">
            <input formControlName="userName" class="form-control" placeholder="user name">
            <ap-vmessage
                *ngIf="signupForm.get('userName').errors?.required"
                text="Username is required!">
            </ap-vmessage>
            <ap-vmessage
                *ngIf="signupForm.get('userName').errors?.minlength"
                text="Minimum length is 2">
            </ap-vmessage>
            <ap-vmessage
                *ngIf="signupForm.get('userName').errors?.maxlength"
                text="Maximum length is 30">
            </ap-vmessage>
            <ap-vmessage
                *ngIf="signupForm.get('userName').errors?.lowerCase"
                text="Must be lowercase">
            </ap-vmessage>

            <ap-vmessage
                text="Username already taken"
                *ngIf="signupForm.get('userName').errors?.userNameTaken">
            </ap-vmessage>
            <small *ngIf="signupForm.get('userName').valid" class="text-success">User available</small>

        </div>
    
        <div class="form-group">
            <input formControlName="password" type="password" class="form-control" placeholder="password">
            <ap-vmessage
                *ngIf="signupForm.get('password').errors?.required"
                text="Password is required!">
            </ap-vmessage>
            <ap-vmessage
                *ngIf="signupForm.get('password').errors?.minlength"
                text="Minimum length is 8">
            </ap-vmessage>
            <ap-vmessage
                *ngIf="signupForm.get('password').errors?.maxlength"
                text="Maximum length is 14">
            </ap-vmessage>
        </div>

        <button [disabled]="signupForm.invalid || signupForm.pending" class="btn btn-primary btn-block">Register</button>
    
        <p>Already a user? <a [routerLink]="['']">Sign In!</a></p>
    </form>
*******************************************************************************
// app/home/signin/signin.component.ts ****************************************
// 8/8 ************************************************************************

import { Component, OnInit, ElementRef, ViewChild } from '@angular/core';
import { FormGroup, FormBuilder, Validators } from '@angular/forms';
import { AuthService } from 'src/app/core/auth/auth.service';
import { Router } from '@angular/router';
import { PlatformDetectorService } from 'src/app/core/platform-detector/platform-detector.service';

@Component({
    templateUrl: './signin.component.html'
})
export class SignInComponent implements OnInit {
   
    loginForm: FormGroup;

    @ViewChild('userNameInput') userNameInput: ElementRef<HTMLInputElement>;

    constructor(
            private formBuilder: FormBuilder,
            private authService: AuthService,
            private router: Router,
            private platformDetectionService: PlatformDetectorService
            ) { }

    ngOnInit(): void {
        this.loginForm = this.formBuilder.group({

            userName: ['', Validators.required],
            password: ['', Validators.required]
        });
            // Foca no campo user name ao carregar a página *******************
            this.platformDetectionService.isPlatformBrowser() &&
            this.userNameInput.nativeElement.focus();
    }
    
    login() {
        const userName = this.loginForm.get('userName').value;
        const password = this.loginForm.get('password').value;
    
        this.authService
            .authenticate(userName, password)
            .subscribe(
                () => this.router.navigate(['user', userName]),
                err => {
                    console.log(err);
                    this.loginForm.reset();
                    this.platformDetectionService.isPlatformBrowser() &&
                    this.userNameInput.nativeElement.focus();
                    alert('Invalid user name or password')
                }
            );
    }
 }
*******************************************************************************
Exercício: Quais componentes são executados ao acessar /produtos/4?

const appRoutes: Routes = [
  { path: 'produtos', 
      component: ProdutosHomeComponent,
      children: [
          {
            path: '', 
            component: ProdutoListComponent
          },
          {
            path: ':id', 
            component: ProdutoDetalheComponent
          }
      ]
  }
]

Resposta: ProdutosHomeComponent e ProdutoDetalheComponent
*******************************************************************************
04 Build do projeto - 23/11/2019 ##############################################
-> Gerar build do projeto, segue abaixo:
-> No terminal, parar a aplicação e digitar -> "ng build --prod" -> o resultado é uma pasta com os arquivos a serem deployados 
-> verificar o conteúdo da pasta alurapic/dist/alurapic
-> É A pasta "alurapic" gerada que é colocada no servidor apache, php, etc...

// app.routing.module.ts ######################################################
// 1/1 ************************************************************************

import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';

import { PhotoListComponent } from './photos/photo-list/photo-list.component';
import { NotFoundComponent } from './errors/not-found/not-found.component';
import { PhotoListResolver } from './photos/photo-list/photos/photo-listresolver';
import { SignInComponent } from './home/signin/signin.component';
import { AuthGuard } from './core/auth/auth.guard';
import { SignUpComponent } from './home/signup/signup.component';
import { HomeComponent } from './home/home.component';

const routes: Routes = [

    {path: '',
    component: HomeComponent,
    canActivate: [ AuthGuard ],
    children: [

            {path: '',
            component: SignInComponent,
        },

        {path: 'signup',
        component: SignUpComponent,
        },

    ]
    },

        {path: 'user/:userName', 
            component: PhotoListComponent,
            resolve:{
                photos: PhotoListResolver
            }
        },

        {path: 'p/add', 
        component: PhotoListComponent
        },

        {path: '**', 
        component: NotFoundComponent
        }
];

@NgModule({
    // "{ useHash: true }" -> Para maior compatibilidade ******************
    //  com a maioria do navegadores
    // IMPORTANTE -> O Angular só oferece ********************************* 
    // suporte para as duas versões mais recentes de cada navegador
    imports: [RouterModule.forRoot(routes, { useHash: true } )
    ],
    exports: [RouterModule]
})

export class AppRoutingModule{}
*******************************************************************************
05 Lazy loading e code splitting - 23/11/2019 #################################
-> Carregar a aplicação aos poucos, conforme o ********************************
usuário avanças pelas telas
-> Definir quais módulos serão carregados primeiro -> "home.module"
*******************************************************************************
06 Implementando o Lazy loading - 23/11/2019 ##################################
-> Organizando melhor as rotas:
-> Em "home" criar o arquivo "home-routing.module.ts"
*******************************************************************************
// app.routing.module.ts ######################################################
// 1/4 ************************************************************************




import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';

import { PhotoListComponent } from './photos/photo-list/photo-list.component';
import { NotFoundComponent } from './errors/not-found/not-found.component';
import { PhotoListResolver } from './photos/photo-list/photos/photo-listresolver';

const routes: Routes = [

    // Organizando melhor as rotas ********************************************
    {
        // Se não inserir uma rota direciona para home ************************
        path:'',
        // "pathMatch: 'full'," -> o rota tem que ser exata *******************
        pathMatch: 'full',
        redirectTo:'home'
    },
    
    {
        path: 'home',
        // Carregará módulos sob demanda **************************************
        loadChildren: './home/home.module#HomeModule'
    },

        {path: 'user/:userName', 
            component: PhotoListComponent,
            resolve:{
                photos: PhotoListResolver
            }
        },

        {path: 'p/add', 
        component: PhotoListComponent
        },

        {path: '**', 
        component: NotFoundComponent
        }
];

@NgModule({
    imports: [RouterModule.forRoot(routes, { useHash: true } )
    ],
    exports: [RouterModule]
})

export class AppRoutingModule{}
*******************************************************************************
// home/home-routing.module.ts ************************************************
// 2/4 ************************************************************************

import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';
import { HomeComponent } from './home.component';
import { AuthGuard } from '../core/auth/auth.guard';
import { SignInComponent } from './signin/signin.component';
import { SignUpComponent } from './signup/signup.component';

const routes: Routes = [

    // Organizando melhor as rotas ********************************************

    // {path: 'home', -> Esta rota vai depender *******************************
    // de rota definida no pai
    {path: '',
    component: HomeComponent,
    canActivate: [ AuthGuard ],
    children: [
            {path: '',
            component: SignInComponent,
        },

        {path: 'signup',
        component: SignUpComponent,
        },
    ]
    },
];

@NgModule({
    imports: [RouterModule.forChild(routes)
    ],
    exports: [RouterModule]
})

export class HomeRoutingModule{}
*******************************************************************************
// app.module.ts ##############################################################
// 3/4 ************************************************************************

import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppComponent } from './app.component';
import { PhotosModule } from './photos/photos.module';
import { AppRoutingModule } from './app.routing.module';
import { ErrorsModule } from './errors/errors.module';
// import { HomeModule } from './home/home.module';
import { CoreModule } from './core/core.module';

@NgModule({
  declarations: [
    AppComponent,
  ],
  imports: [
    BrowserModule,
    PhotosModule,
    ErrorsModule,
    // Desfazer a importação de "HomeModule" **********************************
    // HomeModule,
    CoreModule,
    // Boa pŕatica, importa "AppRoutingModule" por último *********************
    AppRoutingModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
*******************************************************************************
// app/home/home.module.ts ****************************************************
// 4/4 ************************************************************************ 

import { NgModule } from '@angular/core';
import { SignInComponent } from './signin/signin.component';

import { ReactiveFormsModule, FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { VMessageModule } from '../shared/vmessage/vmessage.module';
import { RouterModule } from '@angular/router';
import { SignUpComponent } from './signup/signup.component';
import { HomeComponent } from './home.component';
import { HomeRoutingModule } from './home-routing.module';

@NgModule({
    declarations: [ SignInComponent,
                    SignUpComponent,
                    HomeComponent 
                ],
    imports: [ ReactiveFormsModule,
                CommonModule,
                VMessageModule,
                RouterModule,
                FormsModule,
                // Importar "HomeRoutingModule" *******************************
                HomeRoutingModule
            ]
})
export class HomeModule { }
*******************************************************************************
07 Refinando o uso de serviços - 23/11/2019 ###################################
-> Melhora na utilização dos serviços "signup.service.ts" e *******************
 "user-not-taken.validator.service.ts" que não precisam de disponibildade global na aplicação 
*******************************************************************************
// signup/user-not-taken.validator.service.ts #################################
// 1/4 ************************************************************************




import { Injectable } from '@angular/core';
import { SignUpService } from './signup.service';
import { AbstractControl } from '@angular/forms';
import { debounceTime, switchMap, map, first } from 'rxjs/operators';

// Retirar "{ providedIn: 'root' }" pois não terá mais ************************
// disponibilidade global na aplicação
@Injectable()
export class UserNotTakenValidatorService {

    constructor(private signUpService: SignUpService) {}

    checkUserNameTaken() {
        return (control: AbstractControl) => {
            return control
            .valueChanges
            .pipe(debounceTime(500)) 
            .pipe(switchMap(userName => 
                this.signUpService.checkUserNameTaken(userName)
            ))
                .pipe(map(isTaken => isTaken ? { userNameTaken: true} : null))
                .pipe(first());
        }
    }
}
*******************************************************************************
// home/signup/signup.component.ts ############################################
// 2/4 ************************************************************************

import { Component, ViewChild, ElementRef } from '@angular/core';
import { FormGroup, FormBuilder, Validators } from '@angular/forms';
import { lowerCaseValidator } from 'src/app/shared/validators/lower.case.validator';
import { UserNotTakenValidatorService } from './user-not-taken.validator.service';
import { NewUser } from './new-user';
import { SignUpService } from './signup.service';
import { Router } from '@angular/router';
import { PlatformDetectorService } from 'src/app/core/platform-detector/platform-detector.service';

@Component({
    templateUrl: './signup.component.html', 
    // Declarar "UserNotTakenValidatorService" ********************************
    providers: [ UserNotTakenValidatorService ]
})
export class SignUpComponent { 

    signupForm: FormGroup;
    @ViewChild('emailInput') emailInput: ElementRef<HTMLInputElement>;
    
    constructor(private formBuilder: FormBuilder,
                private userNotTakenValidatorService: UserNotTakenValidatorService,
                private signUpService: SignUpService,
                private router: Router,
                private platformDetectorService: PlatformDetectorService) {}

    ngOnInit(): void {

        this.signupForm = this.formBuilder.group({
    
            email: ['',
                [
                    Validators.required,
                    Validators.email
                ]
            ],
    
            fullName: ['',
                [
                    Validators.required,
                    Validators.minLength(2),
                    Validators.maxLength(40)
                ]
            ],
    
            userName: ['',
                [
                    Validators.required,
                    lowerCaseValidator,
                    Validators.minLength(2),
                    Validators.maxLength(30)
                ],
                this.userNotTakenValidatorService.checkUserNameTaken()
            ],
            
            password: ['',
                [
                    Validators.required,
                    Validators.minLength(8),
                    Validators.maxLength(14)
                ]
            ]
        });

        this.platformDetectorService.isPlatformBrowser() &&
        this.emailInput.nativeElement.focus();
    }
   
    signup() {
        const newUser = this.signupForm.getRawValue() as NewUser;
        this.signUpService
        .signup(newUser)
        .subscribe(
            ()=> this.router.navigate(['']),
            err => console.log(err)
            );
    }
}
*******************************************************************************
// signup/signup.service.ts ###################################################
// 3/4 ************************************************************************

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { NewUser } from './new-user';

const API_URL = "http://localhost:3000";

// Remove "{ providedIn: 'root' }" do Injectable pois não *********************
//  terá mais disponibilidade global na aplicação
@Injectable()
export class SignUpService {

    constructor(private http: HttpClient) {}

    checkUserNameTaken(userName: string) {

        return this.http.get(API_URL + '/user/exists/' + userName);
    }

    signup(newUser: NewUser) {
        return this.http.post(API_URL + '/user/signup', newUser);
    }
}
*******************************************************************************
// app/home/home.module.ts ****************************************************
// 4/4 ************************************************************************ 

import { NgModule } from '@angular/core';
import { SignInComponent } from './signin/signin.component';

import { ReactiveFormsModule, FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { VMessageModule } from '../shared/vmessage/vmessage.module';
import { RouterModule } from '@angular/router';
import { SignUpComponent } from './signup/signup.component';
import { HomeComponent } from './home.component';
import { HomeRoutingModule } from './home-routing.module';
import { SignUpService } from './signup/signup.service';

@NgModule({
    declarations: [ SignInComponent,
                    SignUpComponent,
                    HomeComponent 
                ],
    imports: [ ReactiveFormsModule,
                CommonModule,
                VMessageModule,
                RouterModule,
                FormsModule,
                HomeRoutingModule
            ],
            // Declarar "SignUpService" ***************************************
            providers: [
                SignUpService
            ]
})
export class HomeModule { }
*******************************************************************************
08 Interceptadores e envio do token - 24/11/2019 ##############################
-> Usuário logado pode manipular suas próprias ********************************
fotos reconhecido pelo sistema via token
-> Criar em "auth" -> "request.interceptor.ts"

// auth/request.interceptor.ts ################################################
// Intercepta o token do usuário para *****************************************
// reconhecer sua autorização para ações na aplicação
// 1/2 ************************************************************************




import { Injectable } from "@angular/core";
import { HttpInterceptor } from "@angular/common/http";
import { HttpRequest } from "@angular/common/http";
import { HttpHandler } from "@angular/common/http";
import { Observable } from "rxjs";
import { HttpSentEvent } from "@angular/common/http";
import { HttpHeaderResponse } from "@angular/common/http";
import { HttpProgressEvent } from "@angular/common/http";
import { HttpResponse } from "@angular/common/http";
import { HttpUserEvent } from "@angular/common/http";
import { TokenService } from '../token/token.service';

@Injectable()
export class RequestInterceptor implements HttpInterceptor {

    // TokenService -> Para identificar se usuário logado *********************
    constructor(private tokenService: TokenService) {}

    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpSentEvent
        | HttpHeaderResponse | HttpProgressEvent | HttpResponse<any> | HttpUserEvent<any>> {


            
            // Se estiver logado captura o token ******************************
            if(this.tokenService.hasToken()) {
                const token = this.tokenService.getToken();
                // Se logado faz uma cópia e **********************************
                // seta "'x-access-token': token" para
                //  uso posterior na apliação
                req = req.clone({
                    setHeaders : {
                        'x-access-token': token
                    }
                });
            }
        return next.handle(req);

    }
}
*******************************************************************************
// core/core.module.ts ########################################################
// 2/2 ************************************************************************

import { NgModule } from '@angular/core';
import { HeaderComponent } from './header/header.component';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';
import { HTTP_INTERCEPTORS } from '@angular/common/http';
import { RequestInterceptor } from './auth/request.interceptor';

@NgModule({
    declarations: [ HeaderComponent ],
    exports: [ HeaderComponent ],

    imports: [ CommonModule, 
                RouterModule ],
    // Declarar a provisão de "HTTP_INTERCEPTORS" *****************************
    providers: [
        {
        provide: HTTP_INTERCEPTORS,
        useClass:RequestInterceptor,
        // Para o caso de mais interceptadores serem criados ******************
        multi: true
        }
    ]            
})
export class CoreModule{
}

// No browser -> Efetuar o login e no terminal, no segundo ******************** 
// terminal, verificar a presença da
//  frase: "A token is send by the application"
*******************************************************************************
Módulo 3 - 03 Rodapé - 30/11/2019 #############################################
-> Criar dentro de "core" a pasta "footer" com os arquivos "footer.component.ts" e "footer.component.html"

// core/footer/footer.component.ts ############################################
// 1/4 ************************************************************************ 

import { Component, OnInit } from "@angular/core";
import { UserService } from "../user/user.service";
import { Observable } from 'rxjs';
import { User } from '../user/user';

@Component({
    selector: 'ap-footer',
    templateUrl: './footer.component.html'
})
export class FooterComponent implements OnInit {

    // Variável com "$" significa que é um observable *************************
    user$: Observable<User>;
    // userService -> Para indicar se usuário logado **************************
    constructor(private userService: UserService) {}

    ngOnInit(): void {
     this.user$ = this.userService.getUser();

    }
}
*******************************************************************************
<!-- core/footer/footer.component.html ************************************ -->
<!-- 2/4 ****************************************************************** -->

<!-- Tag footer do html5 ************************************************** -->
<!-- *ngIf -> Se usuário logado, exibe o nome com async pipe ************** -->
<!-- class="fixed-bottom -> fixa o rodapé na parte de baixo da tela ******* -->
<!-- [routerLink]="['']" -> link para login com ícone ********************* -->
<!-- fa-2x -> Aumenta o tamanho do ícone ********************************** -->
<footer class="mt-5" *ngIf="(user$ | async) as user">
    <div class="fixed-bottom bg-white p-1">
        <div class="container">
            <div class="row text-center">
                <div class="col-6">
                    <a [routerLink]="['']">
                        <i class="fa fa-home fa-2x"></i>
                    </a>
                </div>
                <div class="col-6">
                    <a [routerLink]="['p', 'add']">
                        <i class="fa fa-plus-circle fa-2x"></i>
                    </a>
                </div>
            </div>
        </div>
    </div>
</footer>
*******************************************************************************
// core/core.module.ts ########################################################
// 3/4 ************************************************************************

import { NgModule } from '@angular/core';
import { HeaderComponent } from './header/header.component';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';
import { HTTP_INTERCEPTORS } from '@angular/common/http';
import { RequestInterceptor } from './auth/request.interceptor';
import { FooterComponent } from './footer/footer.component';

@NgModule({
    declarations: [ HeaderComponent,
                // Declara FooterComponent ************************************
                    FooterComponent],
    exports: [ HeaderComponent,
                // Exporta FooterComponent ************************************
                FooterComponent],

    imports: [ CommonModule, 
                RouterModule ],

    providers: [
        {
        provide: HTTP_INTERCEPTORS,
        useClass:RequestInterceptor,
        multi: true
        }
    ]            
})
export class CoreModule{
}
*******************************************************************************
<!-- app.component.html ################################################### -->
<!-- 4/4 *****************************************************************  -->

<ap-header></ap-header>
<router-outlet></router-outlet>
<!-- Declara o componente rodapé ****************************************** -->
<ap-footer></ap-footer>

<!-- O Rodapé deve aparecer nas telas após o login ************************ -->
*******************************************************************************
04 O formulário upload de fotos - 01/12/2019 ##################################

// photo-form/photo-form.module.ts ###########################################
// 1/3 *********************************************************************** 

import { NgModule } from '@angular/core';
import { PhotoFormComponent } from './photo-form.component';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule, FormsModule } from '@angular/forms';
import { VMessageModule } from 'src/app/shared/vmessage/vmessage.module';

@NgModule({
    declarations: [PhotoFormComponent],
    imports: [CommonModule,
                // Importar ReactiveFormsModule *******************************
                ReactiveFormsModule,
                // Importar VMessageModule para ajudar na *********************
                // validação do form
                VMessageModule,
                // Importar FormsModule para trabalhar com o ******************
                //  FormGrops a ser criado em photo-form.component.ts
                FormsModule]
})
export class PhotoFormModule { }
*******************************************************************************
<!-- photo/photo-form/photo-form.component.ts ***************************** -->
<!-- 2/3 ****************************************************************** -->

<!-- class="col-md-6 -> form com a tela dividida em 2 ********************* -->
<!-- accept="image/*" -> só permite selecionar ********************************
  imagens para upload -->
<div class="container">
  <form class="row">
    <div class="col-md-6 text-center">
      <input type="file" accept="image/*">
    </div>

    <div class="col-md-6">
      <div class="form-group">
        <textarea 
          class="form-control form-control-sm" 
          placeholder="photo description"></textarea>
      </div>

      <div class="form-group">
        <label class="text-muted">
          Allow comments
          <input type="checkbox">
        </label>
      </div>

      <button type="submit" class="btn btn-primary btn-block">
        Upload
      </button>

      <a class="btn btn-secondary btn-block">Cancel</a>
    </div>
  </form>
</div>
*******************************************************************************
// app.routing.module.ts ######################################################
// 3/3 ************************************************************************

import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';

import { PhotoListComponent } from './photos/photo-list/photo-list.component';
import { NotFoundComponent } from './errors/not-found/not-found.component';
import { PhotoListResolver } from './photos/photo-list/photos/photo-listresolver';
import { PhotoFormComponent } from './photos/photo-form/photo-form.component';

const routes: Routes = [

    {
        path:'',
        pathMatch: 'full',
        redirectTo:'home'
    },
    
    {
        path: 'home',
        loadChildren: './home/home.module#HomeModule'
    },

        {path: 'user/:userName', 
            component: PhotoListComponent,
            resolve:{
                photos: PhotoListResolver
            }
        },

        {path: 'p/add', 
        // Verificar declaração de PhotoFormComponent *************************
        component: PhotoFormComponent
        },

        {path: '**', 
        component: NotFoundComponent
        }
];

@NgModule({
    imports: [RouterModule.forRoot(routes, { useHash: true } )
    ],
    exports: [RouterModule]
})

export class AppRoutingModule{}
*******************************************************************************
05 Validando o formulário - 01/12/2019 ########################################

// photo-form.component.ts ####################################################
// 1/2 ************************************************************************ 

import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';

@Component({
  selector: 'ap-photo-form',
  templateUrl: './photo-form.component.html',
  styleUrls: ['./photo-form.component.css']
})
export class PhotoFormComponent implements OnInit {

  photoForm: FormGroup;

  constructor(private formBuilder: FormBuilder) { }

  ngOnInit() {
    this.photoForm = this.formBuilder.group({
      // Define campo como obrigatório ****************************************
      file: ['', Validators.required],
      // Limita número de caracteres do campo *********************************
      description: ['', Validators.maxLength(300)],
      // Deixará a checkbox comentáros como opcional **************************
      allowComments: [true]
    })
  }
}
*******************************************************************************
<!-- photo/photo-form/photo-form.component.ts ***************************** -->
<!-- 2/2 ****************************************************************** -->

<!-- [formGroup]="photoform" -> precisa ***************************************
  coincidir com "photoForm: FormGroup;" em "photo-form.component.ts" -->

<!-- formControlName="file" -> o atributo "file" precisa **********************
  coincidir com "file" em "photo-form.component.ts" -->

<!-- formControlName="description" precisa ************************************
     coincidir com "description: [''," declarado em
      "photo-form.component.ts" -->

<!-- [disabled]="photoForm.invalid" -> mantém o botão *************************
  submit desabilidato enquanto o formuláro 
  tiver campos com erro de validação -->

<!-- text="Please, select a photo" ********************************************
  *ngIf="photoForm.get('file').errors?.required"> -> Seta msg do
   campo obrigatório-->

<!-- ('file') -> Tem que conincidir *******************************************
    com "file:" em "photo-form.component.ts" -->

<div class="container">
  <form [formGroup]="photoForm" class="row">
    <div class="col-md-6 text-center">
      <input formControlName="file" type="file" accept="image/*">
      <ap-vmessage 
        text="Please, select a photo" 
        *ngIf="photoForm.get('file').errors?.required">
      </ap-vmessage>
    </div>

    <div class="col-md-6">
      <div class="form-group">
        <textarea 
          formControlName="description"
          class="form-control form-control-sm" 
          placeholder="photo description"></textarea>
      <ap-vmessage 
        text="Maximun size allowed is 300" 
       *ngIf="photoForm.get('description').errors?.maxlength">
    </ap-vmessage>     
      </div>

      <div class="form-group">
        <label class="text-muted">
          Allow comments
          <input 
          formControlName="allowComments"
          type="checkbox">
        </label>
      </div>

      <button [disabled]="photoForm.invalid" type="submit" class="btn btn-primary btn-block">
        Upload
      </button>

      <a class="btn btn-secondary btn-block">Cancel</a>
    </div>
  </form>
</div>
*******************************************************************************
06 Obtendo os dados do formulário - 02/12/2019 ################################
07 Upload da foto - 02/12/2019 ################################################

// photo-form.component.ts ####################################################
// 1/5 ************************************************************************ 
// ATENÇÃO - Pode ser necessário sair e logar novamente devido a **************
//  eventual expiração da sessão para upload
// Podemos restringir quais os tipos de arquivos a serem **********************
// anexados através da propriedade accept da tag input.

import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { PhotoService } from '../photo/photo.service';
import { Router } from '@angular/router';

@Component({
  selector: 'ap-photo-form',
  templateUrl: './photo-form.component.html',
  styleUrls: ['./photo-form.component.css']
})
export class PhotoFormComponent implements OnInit {

  photoForm: FormGroup;
  // Criar var para trabalhar com o arquivo de foto ***************************
  file: File;

  constructor(private formBuilder: FormBuilder,
              // Injetar photoService e router ********************************
              private photoService: PhotoService,
              private router: Router) { }

  ngOnInit() {
    this.photoForm = this.formBuilder.group({
      file: ['', Validators.required],
      description: ['', Validators.maxLength(300)],
      allowComments: [true]
    })
  }

  // Criar o método upload com todos os ***************************************
  // dados da foto a partir da propriedade "getRawValue"
  upload() {
    const description = this.photoForm.get('description').value;
    const allowComments = this.photoForm.get('allowComments').value;
    
    // Faz o upload e navega para home após sucesso na operação ***************
    this.photoService
      .upload(description, allowComments, this.file)
      .subscribe(()=> this.router.navigate(['']));

    console.log(description);
    console.log(allowComments);
    console.log(this.file);
  }
}
*******************************************************************************
<!-- photo/photo-form/photo-form.component.ts ***************************** -->
<!-- 2/5 ****************************************************************** -->

<!-- (submit)="upload" -> utiliza método declarado ****************************
   em photo-form.component.ts -->

<!-- (change)="file -> para trabalhar com array com ***************************
   todos os arquivos selecionados pelo usuário -->
<div class="container">
  <form [formGroup]="photoForm" class="row" (submit)="upload()">
    <div class="col-md-6 text-center">

      <input formControlName="file" 
        type="file" 
        accept="image/*"
      (change)="file = $event.target.files[0]"
      >

      <ap-vmessage 
        text="Please, select a photo" 
        *ngIf="photoForm.get('file').errors?.required">
      </ap-vmessage>
    </div>

    <div class="col-md-6">
      <div class="form-group">
        <textarea 
          formControlName="description"
          class="form-control form-control-sm" 
          placeholder="photo description"></textarea>
      <ap-vmessage 
        text="Maximun size allowed is 300" 
       *ngIf="photoForm.get('description').errors?.maxlength">
    </ap-vmessage>     
      </div>

      <div class="form-group">
        <label class="text-muted">
          Allow comments
          <input 
          formControlName="allowComments"
          type="checkbox">
        </label>
      </div>

      <button [disabled]="photoForm.invalid" type="submit" class="btn btn-primary btn-block">
          Upload
      </button>

      <a class="btn btn-secondary btn-block">Cancel</a>
    </div>
  </form>
</div>
*******************************************************************************
// photo.service.ts ############################################################
// 3/5 ************************************************************************* 

import { HttpClient, HttpParams } from "@angular/common/http";
import { Injectable } from "@angular/core";
import { Photo } from "./photo";

const API = 'http://localhost:3000';

@Injectable({providedIn: 'root'})
export class PhotoService{

    constructor(private http: HttpClient){
    }
        listFromUser(userName: string){
            return this.http.
            get<Photo[]>(API + '/' + userName + '/photos');
    }

        listFromUserPaginated(userName: string, page: number) {
            const params = new HttpParams()
                .append('page', page.toString());
        
            return this.http
            .get<Photo[]>(API + '/' + userName + '/photos', { params });
        }

        // Cria o método para ser usado no serviço de fotos *******************
        upload(description: string, allowComments: boolean, file: File) {

            const formData = new FormData();
            formData.append('description', description);
            formData.append('allowComments', allowComments ? 'true' : 'false');
            formData.append('imageFile', file);
            return this.http.post(API + '/photos/upload', formData);
        }    
}
*******************************************************************************
// photo-form/photo-form.module.ts ###########################################
// 4/5 *********************************************************************** 

import { NgModule } from '@angular/core';
import { PhotoFormComponent } from './photo-form.component';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule, FormsModule } from '@angular/forms';
import { VMessageModule } from 'src/app/shared/vmessage/vmessage.module';
import { RouterModule } from '@angular/router';

@NgModule({
    declarations: [PhotoFormComponent],
    imports: [CommonModule,
                ReactiveFormsModule,
                VMessageModule,
                FormsModule,
                // Injetar RouterModule ***************************************
                RouterModule]
})
export class PhotoFormModule { }
*******************************************************************************
// photo.component.ts #########################################################
// 5/5 ************************************************************************ 

import { Component, Input } from "@angular/core";

// As fotos importadas precisam ser roteadas para *****************************
// que possma ser acessadas pela listagem de fotos
const CLOUD = 'http://localhost:3000/imgs/';

@Component({
    selector: 'ap-photo',
    templateUrl: 'photo.component.html'
})
export class PhotoComponent{

  private _url = '';

  @Input() description = '';

  @Input() set url(url: string){

    if(!url.startsWith('data')){
        // Exibe fotos carregadas pelo criador da API *************************
        this._url = CLOUD + url;
    }else {
      // Exibe fofos carregadas no decorrer do uso da API *********************
      this._url = url;
    }
  }

  get url(){
    return this._url;
  }
}
*******************************************************************************
02 Um botão mais elegante - 03/12/2019 ########################################
-> Criação de previews clicáveis das imagens a serem carregadas ***************



<!-- photo/photo-form/photo-form.component.ts ***************************** -->
<!-- 1/3 ****************************************************************** -->

<div class="container">
  <form [formGroup]="photoForm" class="row" (submit)="upload()">
    <div class="col-md-6 text-center">

      <div class="form-group" *ngIf="!preview; else previewImage">

        <!-- Inserir botão com ícone **************************************** -->
        <!-- Quando o botão for acionado o input hidden *************************
         setado abaixo será acionado -->
        <!-- #fileInput -> combina o botão com o input ********************** -->
        <button type="button" (click)="fileInput.click()" class="btn btn-primary">
          <i class="fa fa-image fa-4x align-middle"></i>
        </button>

        <input #fileInput hidden formControlName="file" type="file" accept="image/*"
          (change)="handleFile(file = $event.target.files[0])">

        <ap-vmessage text="Please, select a photo" *ngIf="photoForm.get('file').errors?.required">
        </ap-vmessage>
      </div>

      <!-- Exibe o preview da imagem ****************************************** -->
      <ng-template #previewImage>
        <div class="text-center">
          <ap-photo [url]="preview" title="Preview">
          </ap-photo>>
        </div>
      </ng-template>
    </div>

    <div class="col-md-6">
      <div class="form-group">
        <textarea formControlName="description" class="form-control form-control-sm"
          placeholder="photo description"></textarea>
        <ap-vmessage text="Maximun size allowed is 300" *ngIf="photoForm.get('description').errors?.maxlength">
        </ap-vmessage>
      </div>

      <div class="form-group">
        <label class="text-muted">
          Allow comments
          <input formControlName="allowComments" type="checkbox">
        </label>
      </div>

      <button [disabled]="photoForm.invalid" type="submit" class="btn btn-primary btn-block">
        Upload
      </button>

      <a class="btn btn-secondary btn-block">Cancel</a>
    </div>
  </form>
</div>
*******************************************************************************
// photo-form.component.ts ####################################################
// 2/3 ************************************************************************ 

import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { PhotoService } from '../photo/photo.service';
import { Router } from '@angular/router';

@Component({
  selector: 'ap-photo-form',
  templateUrl: './photo-form.component.html',
  styleUrls: ['./photo-form.component.css']
})
export class PhotoFormComponent implements OnInit {

  photoForm: FormGroup;
  file: File;
  // Cria propriedade para converter o arquivo de imagem **********************
  preview: string;

  constructor(private formBuilder: FormBuilder,
              private photoService: PhotoService,
              private router: Router) { }

  ngOnInit() {
    this.photoForm = this.formBuilder.group({
      file: ['', Validators.required],
      description: ['', Validators.maxLength(300)],
      allowComments: [true]
    })
  }

  upload() {
    const description = this.photoForm.get('description').value;
    const allowComments = this.photoForm.get('allowComments').value;
    this.photoService
      .upload(description, allowComments, this.file)
      .subscribe(()=> this.router.navigate(['']));

    console.log(description);
    console.log(allowComments);
    console.log(this.file);
  }

  // Cria método handleFile para atender ao mesmo *****************************
  //  método declarado em photo-form.component.ts
  handleFile(file: File) {
    this.file = file;
    const reader = new FileReader();
    reader.onload = (event: any) => this.preview = event.target.result;
    reader.readAsDataURL(file); 
  }
}
*******************************************************************************
// photo-form/photo-form.module.ts ###########################################
// 3/3 *********************************************************************** 

import { NgModule } from '@angular/core';
import { PhotoFormComponent } from './photo-form.component';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule, FormsModule } from '@angular/forms';
import { VMessageModule } from 'src/app/shared/vmessage/vmessage.module';
import { RouterModule } from '@angular/router';
import { PhotoModule } from '../photo/photo.module';

@NgModule({
    declarations: [PhotoFormComponent],
    imports: [CommonModule,
                ReactiveFormsModule,
                VMessageModule,
                FormsModule,
                RouterModule,
                // Importar PhotoModule ***************************************
                PhotoModule]
})
export class PhotoFormModule { }
*******************************************************************************
07 Seleção automática de arquivos - 04/12/2019 ################################

-> Abrir seleção de fotos logo quando o botão upload for acionado *************
-> Dentro de "shared" criar a pasta "immediate-click' com os arquivos "immediate-click.directive.ts" e "immediate-click-module.ts" dentro

// shared/immediate-click/immediate-click.directive.ts ########################
// 1/4 ************************************************************************

import { Directive, ElementRef, OnInit } from "@angular/core";
import { PlatformDetectorService } from '../../core/platform-detector/platform-detector.service';

@Directive({
    selector: '[immediateClick]'
})
export class ImmediateClickDirective implements OnInit {

    constructor(
        private element: ElementRef<any>,
        private platFormDetector: PlatformDetectorService) {}

        ngOnInit(): void {    
            // Só executa se detectar que a aplicação *************************
            // está rodando em um browser
            this.platFormDetector.isPlatformBrowser &&
            this.element.nativeElement.click();
    }
}
*******************************************************************************
// shared/immediate-click/immediate-click-module.ts ###########################
// 2/4 ************************************************************************

import {NgModule} from "@angular/core";
import { ImmediateClickDirective } from "./immediate-click.directive";
import { CommonModule }  from "@angular/common";

@NgModule({
    declarations: [ImmediateClickDirective],
    exports: [ImmediateClickDirective],
    imports: [CommonModule]
})
export class ImmediateClickModule { }
*******************************************************************************
// photo-form/photo-form.module.ts ###########################################
// 3/4 *********************************************************************** 

import { NgModule } from '@angular/core';
import { PhotoFormComponent } from './photo-form.component';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule, FormsModule } from '@angular/forms';
import { VMessageModule } from 'src/app/shared/vmessage/vmessage.module';
import { RouterModule } from '@angular/router';
import { PhotoModule } from '../photo/photo.module';
import { ImmediateClickModule } from 'src/app/shared/immediate-click/immediate-click-module';

@NgModule({
    declarations: [PhotoFormComponent],
    imports: [CommonModule,
                ReactiveFormsModule,
                VMessageModule,
                FormsModule,
                RouterModule,
                PhotoModule,
                // Importar ImmediateClickModule ******************************
                ImmediateClickModule
            ]
})
export class PhotoFormModule { }
*******************************************************************************
<!-- photo/photo-form/photo-form.component.ts ***************************** -->
<!-- 4/4 ****************************************************************** -->

<div class="container">
  <form [formGroup]="photoForm" class="row" (submit)="upload()">
    <div class="col-md-6 text-center">

      <div class="form-group" *ngIf="!preview; else previewImage">

        <!-- Injetar "immediateClick" aqui ******************************** -->
        <!-- immediateClick -> Vai abrir a caixa para seleção de **************
           arquivo logo quando o botão for acionado -->
        <button immediateClick type="button" (click)="fileInput.click()" class="btn btn-primary">
          <i class="fa fa-image fa-4x align-middle"></i>
        </button>

        <input #fileInput hidden formControlName="file" type="file" accept="image/*"
          (change)="handleFile(file = $event.target.files[0])">

        <ap-vmessage text="Please, select a photo" *ngIf="photoForm.get('file').errors?.required">
        </ap-vmessage>
      </div>

      <ng-template #previewImage>
        <div class="text-center">
          <ap-photo [url]="preview" title="Preview">
          </ap-photo>>
        </div>
      </ng-template>
    </div>

    <div class="col-md-6">
      <div class="form-group">
        <textarea formControlName="description" class="form-control form-control-sm"
          placeholder="photo description"></textarea>
        <ap-vmessage text="Maximun size allowed is 300" *ngIf="photoForm.get('description').errors?.maxlength">
        </ap-vmessage>
      </div>

      <div class="form-group">
        <label class="text-muted">
          Allow comments
          <input formControlName="allowComments" type="checkbox">
        </label>
      </div>

      <button [disabled]="photoForm.invalid" type="submit" class="btn btn-primary btn-block">
        Upload
      </button>

      <a class="btn btn-secondary btn-block">Cancel</a>
    </div>
  </form>
</div>
*******************************************************************************
08 Bloqueando acesso não autenticado - 07/12/2019 #############################
-> Dentro de app/core/auth criar o arquivo requires-autentication.guard.ts
-> ATENÇÃO -> Trocar os nomes dos arquivos login.guard.ts para **************** 
auth.guard.ts e vice versa (CUIDADO COM OS IMPORTS), já que agora 
haverá um guarda de rotas específico para o login e outro para as demais rotas
*******************************************************************************
// app/core/auth/requires-autentication.guard.ts ##############################
// 1/4 ************************************************************************ 

import { Injectable } from '@angular/core';
import { UserService } from '../user/user.service';
import { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';
import { Observable } from 'rxjs';

@Injectable({ providedIn: 'root'})
export class AuthGuard implements CanActivate {

    constructor(
        private userService: UserService,
        private router: Router) {}

    canActivate(
        route: ActivatedRouteSnapshot, 
        state: RouterStateSnapshot): boolean | Observable<boolean> | Promise<boolean> {

            // Se não logado direciona para tela de login *********************
            if(!this.userService.isLogged()){
                this.router.navigate(['']);
                return false;
            }
            return true;
    }
}
*******************************************************************************
// app.routing.module.ts ######################################################
// 2/4 ************************************************************************

import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';

import { PhotoListComponent } from './photos/photo-list/photo-list.component';
import { NotFoundComponent } from './errors/not-found/not-found.component';
import { PhotoListResolver } from './photos/photo-list/photos/photo-listresolver';
import { PhotoFormComponent } from './photos/photo-form/photo-form.component';
import { AuthGuard } from './core/auth/auth.guard';

const routes: Routes = [

    {
        path:'',
        pathMatch: 'full',
        redirectTo:'home'
    },
    
    {
        path: 'home',
        loadChildren: './home/home.module#HomeModule'
    },

        {path: 'user/:userName', 
            component: PhotoListComponent,
            resolve:{
                photos: PhotoListResolver
            }
        },

        {path: 'p/add', 
        component: PhotoFormComponent,
        // Adicionar guarda de rota *******************************************
        // Testar no nvegador com "localhost:4200/#/p/add" -> deve ************
        // redirecionar para a página de login se não estiver logado
        canActivate: [AuthGuard]
        },

        {path: '**', 
        component: NotFoundComponent
        }
];

@NgModule({
    imports: [RouterModule.forRoot(routes, { useHash: true } )
    ],
    exports: [RouterModule]
})

export class AppRoutingModule{}
*******************************************************************************
// app/core/auth.guard.ts #####################################################
// 3/4 ************************************************************************

import { Injectable } from '@angular/core';
import { UserService } from '../user/user.service';
import { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';
import { Observable } from 'rxjs';

@Injectable({ providedIn: 'root' })
export class LoginGuard implements CanActivate {
    
    constructor(private userService: UserService,
                private router: Router) {}
    
    canActivate(
        route: ActivatedRouteSnapshot,
        state: RouterStateSnapshot): boolean | Observable<boolean> | Promise<boolean> {
            console.log('Ativou guarda de rota');

            if(this.userService.isLogged()){
                this.router.navigate(['user', this.userService.getUserName()])
                return false;
            }
            return true;
    }
}
*******************************************************************************
// home/home-routing.module.ts ************************************************
// 4/4 ************************************************************************

import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';
import { HomeComponent } from './home.component';
import { SignInComponent } from './signin/signin.component';
import { SignUpComponent } from './signup/signup.component';
import { LoginGuard } from '../core/auth/login.guard';

const routes: Routes = [

    {path: '',
    component: HomeComponent,
    // Trocar de AuthGuard para LoginGuard ************************************
    canActivate: [ LoginGuard ],
    children: [
            {path: '',
            component: SignInComponent,
        },

        {path: 'signup',
        component: SignUpComponent,
        },
    ]
    },
];

@NgModule({
    imports: [RouterModule.forChild(routes)
    ],
    exports: [RouterModule]
})

export class HomeRoutingModule{}
*******************************************************************************
02 Rotas parametrizadas - 07/12/2019 ##########################################
-> Criação de compomente para exibição de detalhes das fotos ******************
-> No console executar o seguinte comando para criar o compomente de detalhes das fotos -> ng g c photos/photo-details
-> Dentro de photo-details criar o arquivo photo-details.module.ts
-> Criar o arquivo photo-details.css dentro de photo-details

// photos/photo-details/photo-details.component.ts ############################
// 1/9 ************************************************************************ 

import { Component } from "@angular/core";
import { ActivatedRoute } from '@angular/router';
import { PhotoService } from '../photo/photo.service';
import { Photo } from '../photo/photo';
import { Observable } from 'rxjs';

@Component({
    templateUrl: './photo-details.component.html',
    styleUrls: ['photo-details.css']
})
export class PhotoDetailsComponent {

  photo$: Observable<Photo>;
  constructor(private route: ActivatedRoute,
              // Injetar serviço PhotoService *********************************
              private photoService: PhotoService) {}

    ngOnInit(): void {
        // "params.photoId" -> photoId coincide com ***************************
        // photoId declarado em app.routing.module.ts
        this.photo$ = this.photoService.findById(
          this.route.snapshot.params.photoId
      )
  }
}
*******************************************************************************
// // photos/photo-details/photo-details.module.ts ############################
// 2/9 ************************************************************************

import { NgModule } from "@angular/core";
import { PhotoDetailsComponent } from "./photo-details.component";
import { CommonModule } from "@angular/common";
import { PhotoModule } from '../photo/photo.module';

@NgModule({
    declarations: [PhotoDetailsComponent],
    exports: [PhotoDetailsComponent],
    imports: [
        CommonModule,
        PhotoModule
        ]
})
export class PhotoDetailsModule { }
*******************************************************************************
// photos.module.ts ###########################################################
// 3/9 ************************************************************************

import { NgModule } from "@angular/core";
import { PhotoModule } from './photo/photo.module';
import { PhotoFormModule } from './photo-form/photo-form.module';
import { PhotoListModule } from './photo-list/photo-list.module';
import { PhotoDetailsModule } from './photo-details/photo-details.module';

@NgModule({
   imports: [ 
      PhotoModule,
      PhotoFormModule,
      PhotoListModule,
      // Importar PhotoDetailsModule ******************************************
      PhotoDetailsModule
      ]
})
export class PhotosModule{
}
*******************************************************************************
<!-- photo-details.component.html ######################################### -->
<!-- 4/9 *****************************************************************  -->

<!-- *ngIf="(photo$ | async) as photo -> elimina a ****************************
  necessidade do safe navigation como em {{photo?.description}}  -->
<!-- *ngIf="(photo$ | async) as photo -> só carrega ***************************
   a div se encontrar a foto -->
<div class="bg-white border" *ngIf="(photo$ | async) as photo">
  <div class="row">
    <!-- <div class="col-lg-8"> -> divide a tela em 8 por 4 *************** -->
    <div class="col-lg-8">
      <ap-photo [url]="photo.url" [description]="photo.description"></ap-photo>
    </div>

    <div class="col-lg-4">
      <small>
        <!-- break-word -> declarada em photo-details.css -> quebra ***********
           de linha no campo descrição ************* -->
        <p class="text-left break-word">{{photo.description}}</p>
        <hr>
      </small>
      <div class="mt-4">
        <form>
          <div class="input-group">
            <textarea class="form-control"></textarea>
            <div class="input-group-append">
              <button class="btn btn-primary pull-left">Publish</button>
            </div>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- ERRO -> 'ap-photo' is not a known element: -> Importar *************** 
  PhotoModule em photo-details.module.ts -->
*******************************************************************************
// app.routing.module.ts ######################################################
// 5/9 ************************************************************************

import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';

import { PhotoListComponent } from './photos/photo-list/photo-list.component';
import { NotFoundComponent } from './errors/not-found/not-found.component';
import { PhotoListResolver } from './photos/photo-list/photos/photo-listresolver';
import { PhotoFormComponent } from './photos/photo-form/photo-form.component';
import { AuthGuard } from './core/auth/auth.guard';
import { PhotoDetailsComponent } from './photos/photo-details/photo-details.component';

const routes: Routes = [

    {
        path:'',
        pathMatch: 'full',
        redirectTo:'home'
    },
    
    {
        path: 'home',
        loadChildren: './home/home.module#HomeModule'
    },

        {path: 'user/:userName', 
            component: PhotoListComponent,
            resolve:{
                photos: PhotoListResolver
            }
        },

        {path: 'p/add', 
        component: PhotoFormComponent,
        canActivate: [AuthGuard]
        },

        // Incluir rota para PhotoDetails *************************************
        // O parâmetro recebido pela rota será a var "photoId" ****************
        {
            path: 'p/:photoId',
            component: PhotoDetailsComponent,
        },

        {path: '**', 
        component: NotFoundComponent
        }
];

@NgModule({
    imports: [RouterModule.forRoot(routes, { useHash: true } )
    ],
    exports: [RouterModule]
})

export class AppRoutingModule{}
*******************************************************************************
<!-- photos/photos.component.html ######################################### -->
<!-- 6/9 *****************************************************************  -->

<p class="text-center text-muted" *ngIf="!photos.length">
    Sorry, no photos
</p>
<ol class="list-unstyled">
    <li *ngFor="let cols of rows" class="row no-gutters">

        <div *ngFor="let photo of cols" class="col-4" apDarkenOnHover>

            <!-- Insere [routerLink] para passar o ID da foto ************* -->
            <a [routerLink]="['/p', photo.id]">
                <ap-card [title]="photo.description">
                    <ap-photo [url]="photo.url" [description]="photo.description">
                    </ap-photo>
                    <div class="text-center p-1">
                        <i aria-hidden="true" class="fa fa-heart-o fa-1x mr-2"></i>{{ photo.likes }}
                        <i aria-hidden="true" class="fa fa-comment-o fa-1x mr-2 ml-2"></i>{{ photo.comments }}
                    </div>
                </ap-card>
            </a>


        </div>
    </li>
</ol>
*******************************************************************************
// photo-list/photo-list.module.ts ###########################################
// 7/7 ***********************************************************************

import { NgModule } from '@angular/core';
import { PhotoListComponent } from './photo-list.component';
import { PhotosComponent } from './photos/photos.component';
import { LoadButtonComponent } from './load-button/load-button.component';
import { FilterByDescription } from './photos/filter-by-description.pipe';
import { CommonModule } from '@angular/common';
import { PhotoModule } from '../photo/photo.module';
import { CardModule } from 'src/app/shared/components/card/card.module';
import { SearchComponent } from './search/search.component';
import { DarkenOnHoverModule } from 'src/app/shared/directives/darken-on-hover.module';
import { RouterModule } from '@angular/router';

@NgModule({
    declarations: [
        PhotoListComponent,
        PhotosComponent,
        LoadButtonComponent,
        FilterByDescription,
        SearchComponent
    ],
    imports: [
        CommonModule,
        PhotoModule,
        CardModule,
        DarkenOnHoverModule,
        // Importar RouterModule para direcionar para a página ****************
        //  de detalhes ao clicar em uma fotos
        RouterModule
    ]
})
export class PhotoListModule {}
*******************************************************************************
// photo.service.ts ############################################################
// 8/9 ************************************************************************* 

import { HttpClient, HttpParams } from "@angular/common/http";
import { Injectable } from "@angular/core";
import { Photo } from "./photo";

const API = 'http://localhost:3000';

@Injectable({providedIn: 'root'})
export class PhotoService{

    constructor(private http: HttpClient){
    }
        listFromUser(userName: string){
            return this.http.
            get<Photo[]>(API + '/' + userName + '/photos');
    }

    listFromUserPaginated(userName: string, page: number) {
        const params = new HttpParams()
            .append('page', page.toString());
    
        return this.http
        .get<Photo[]>(API + '/' + userName + '/photos', { params });
    }

    upload(description: string, allowComments: boolean, file: File) {

        const formData = new FormData();
        formData.append('description', description);
        formData.append('allowComments', allowComments ? 'true' : 'false');
        formData.append('imageFile', file);
        return this.http.post(API + '/photos/upload', formData);
    }    

    // Método para retornar dados da foto por ID ******************************
    findById(id: string) {

        return this.http.get<Photo>(API + '/photos/' + id);
    }
}
*******************************************************************************
/* photo-details.css ####################################################### */
/* 9/9 ********************************************************************* */

.break-word {
    word-break: break-all;
}
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************






 
